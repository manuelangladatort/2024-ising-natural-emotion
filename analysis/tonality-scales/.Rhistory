# note duration
data_dynamics_sum <-  data_dynamics %>%
group_by(degree) %>%
summarise(
n = n(),
mean_first_last_invertval = mean(first_last_invertval, na.rm = T),
sd_first_last_invertval = sd(first_last_invertval, na.rm = T),
se_first_last_invertval = sd_first_last_invertval/sqrt(n),
mean_note_duration = mean(sung_note_duration_metrical5, na.rm = T),
sd_note_duration = sd(sung_note_duration_metrical5, na.rm = T),
se_note_duration = sd_note_duration/sqrt(n),
mean_total_duration = mean(total_duration, na.rm = T),
sd_total_duration = sd(total_duration, na.rm = T),
se_note_duration = sd_total_duration/sqrt(n)
)
plot_total_duration = data_dynamics_sum %>%
ggplot(aes(x= degree, y = mean_total_duration)) +
geom_line()+
geom_ribbon(aes(ymin=mean_total_duration - se_note_duration,
ymax=mean_total_duration + se_note_duration),
alpha = 0.4)  +
geom_point(size = 2, shape=21) +
scale_x_continuous(breaks=c(0,1,2,3,4,5,6,7,8,9,10)) +
ylab("Total duration (seconds)") +
xlab("Iteration") +
ggtitle("Melodies become faster over time") +
theme_classic() +
theme(legend.position = "none",  title = element_text(size = 8))
plot_total_duration
plot_note_duration = data_dynamics_sum %>%
ggplot(aes(x= degree, y = mean_note_duration)) +
geom_line()+
geom_ribbon(aes(ymin=mean_note_duration - se_note_duration,
ymax=mean_note_duration + se_note_duration),
alpha = 0.4)  +
geom_point(size = 2, shape=21) +
scale_x_continuous(breaks=c(0,1,2,3,4,5,6,7,8,9,10)) +
ylab("Mean note duration (normalized)") +
xlab("Iteration") +
ggtitle("Last note becomes longer") +
theme_classic() +
theme(legend.position = "none",  title = element_text(size = 8))
plot_note_duration
plot_total_duration = data_dynamics_sum %>%
ggplot(aes(x= degree, y = mean_total_duration)) +
geom_line()+
geom_ribbon(aes(ymin=mean_total_duration - se_note_duration,
ymax=mean_total_duration + se_note_duration),
alpha = 0.4)  +
geom_point(size = 2, shape=21) +
scale_x_continuous(breaks=c(0,1,2,3,4,5,6,7,8,9,10)) +
ylab("Total duration (seconds)") +
xlab("Iteration") +
ggtitle("Melodies become faster over time") +
theme_classic() +
theme(legend.position = "none",  title = element_text(size = 8))
plot_total_duration
plot_first_last_invertval = data_dynamics_sum %>%
ggplot(aes(x= degree, y = mean_first_last_invertval)) +
geom_line()+
geom_ribbon(aes(ymin=mean_first_last_invertval - se_first_last_invertval,
ymax=mean_first_last_invertval + se_first_last_invertval),
alpha = 0.4)  +
geom_point(size = 2, shape=21) +
scale_x_continuous(breaks=c(0,1,2,3,4,5,6,7,8,9,10)) +
ylab("Abs diff first and last note (semitones)") +
xlab("Iteration") +
ggtitle("Melodies tend to finish with first note") +
theme_classic() +
theme(legend.position = "none", title = element_text(size = 8))
plot_first_last_invertval
plot_grid(plot_note_duration, plot_first_last_invertval, nrow = 1)
################################################################################
# Marginals
################################################################################
NBOOT = 1000
BW = 0.25
# marginals intervals
data_melodies_long_intervals =  data_melodies %>%
select(id:participant_id, sung_interval1:sung_interval4) %>%
pivot_longer(cols = starts_with("sung_interval"),
names_to = "interval_pos",
values_to = "interval")
marginals_melodies_intervals = make_marginals_kde(data_melodies_long_intervals, c("interval"), NBOOT, BW)
marginals_melodies_intervals
marginals_melodies_intervals
marginals_melodies_intervals = make_marginals_kde(data_melodies_long_intervals, c("interval"), NBOOT, "",BW)
marginals_melodies_intervals = make_marginals_kde(data_melodies_long_intervals, c("interval"), NBOOT, "title",BW)
marginals_melodies_intervals = make_marginals_kde(data_melodies_long_intervals, c("interval"), NBOOT, BW, "title",)
marginals_melodies_intervals
marginals_melodies_intervals
ggsave("results/marginals_intervals.png", width = 14, height = 7, units = "cm")
marginals_melodies_intervals_separate = make_marginals_kde_separate_4ints(
data_melodies, list_4int_sung.intervals, NBOOT, BW
)
marginals_melodies_intervals_separate = make_marginals_kde_separate_4ints(
data_melodies, list_4int_sung.intervals, NBOOT, BW, "separate marginals"
)
marginals_melodies_intervals_separate
marginals_melodies_intervals = make_marginals_kde(data_melodies_long_intervals, c("interval"), NBOOT, BW, "marginals")
marginals_melodies_intervals
make_marginals_kde_separate_4ints = function(data, sung_intervals, NBOOT, BW, title){
marginals_int1 = make_marginals_kde(data, sung_intervals[1], NBOOT, BW, title)
marginals_int2 = make_marginals_kde(data, sung_intervals[2], NBOOT, BW, title)
marginals_int3 = make_marginals_kde(data, sung_intervals[3], NBOOT, BW, title)
marginals_int4 = make_marginals_kde(data, sung_intervals[4], NBOOT, BW, title)
p = plot_grid(marginals_int1, marginals_int2, marginals_int3, marginals_int4,
ncol = 1)
return(p)
}
ggsave("results/marginals_intervals.png", width = 14, height = 7, units = "cm")
marginals_melodies_intervals_separate = make_marginals_kde_separate_4ints(
data_melodies, list_4int_sung.intervals, NBOOT, BW, "separate marginals"
)
marginals_melodies_intervals_separate
ggsave("results/marginals_intervals_separate.png", width = 12, height = 15, units = "cm")
# TODO: marginals pitches: needs more work
data_melodies_long_pitches =  data_melodies %>%
select(id:participant_id, round_sung_pitch1:round_sung_pitch5) %>%
pivot_longer(cols = starts_with("round_sung_pitch"),
names_to = "pitch_pos",
values_to = "pitch") %>%
filter(degree %in% 7:10)
kde_data_pitches_d.7to10 = kde_bootstrap_1d(data_melodies_long_pitches,
NBOOT,
"pitch",
BW,
"chains",
interval_range_pitch
)
kde_data_pitches_d.7to10 %>% ggplot(aes(x)) +
scale_x_continuous(breaks=seq(min(vertical.lines_pitch), max(vertical.lines_pitch), 1),
limits = interval_range_pitch)  +
geom_vline(xintercept = vertical.lines_pitch, colour = "lightgrey", linetype="dashed") +
geom_ribbon(aes(ymin = avg - sdev, ymax = avg + sdev), alpha = .4, fill = "grey") +
geom_line(aes(y = avg), color="black", size =  0.7) +
# add peaks
xlab("vname") + ylab("density") +
theme_classic() +
theme(axis.text.x = element_text(size=10),
axis.text.y=element_text(size=10),
axis.title.x = element_blank(),
axis.title.y =element_blank(),
axis.ticks.x=element_blank())
################################################################################
# 2. Contours
################################################################################
library(cluster)      # For silhouette analysis
library(factoextra)   # For cluster visualization
library(umap)         # For UMAP dimensionality reduction
data_melodies
# Prepare data for clustering
data_clusters <- prepare_data_for_clustering(data_melodies)
data_clusters
# Select relevant features for clustering
features <- data_clusters[, list_4int_pitches]
features
# Step 1: UMAP for Dimensionality Reduction
umap_config <- umap.defaults
umap_config$n_neighbors <- 15  # Adjust for local/global balance
umap_config$min_dist <- 0.1   # Adjust for compactness of clusters
umap_config$n_components <- 2 # Reduce to 2 dimensions for clustering
umap_res <- umap(features, config = umap_config)
umap_data <- as.data.frame(umap_res$layout)
colnames(umap_data) <- c("UMAP1", "UMAP2")  # Rename columns for clarity
# Step 2: Optimal Number of Clusters
fviz_nbclust(umap_data, kmeans, method = "wss") +
labs(title = "Elbow Method for Optimal k") +
theme_minimal()
fviz_nbclust(umap_data, kmeans, method = "silhouette") +
labs(title = "Silhouette Analysis for Optimal k") +
theme_minimal()
# Step 3: Clustering
# Set the number of clusters
k <- 4
cluster <- kmeans(umap_data, centers = k, nstart = 50)
umap_data$cluster <- as.factor(cluster$cluster)
# Step 4: Validate Clustering with Silhouette Score
silhouette_score <- silhouette(cluster$cluster, dist(umap_data))
mean_silhouette_score <- mean(silhouette_score[, 3])
mean_silhouette_score # 0.47
# Step 4: Visualize Clusters
ggplot(umap_data, aes(x = UMAP1, y = UMAP2, color = cluster)) +
geom_point(size = 1, alpha = 0.7) +
labs(
title = "UMAP (k = 8)",
x = "UMAP Dimension 1",
y = "UMAP Dimension 2",
color = "Cluster"
) +
theme_minimal()
ggsave(paste0("UMAP_clusters_k4.png"),
height = 12, width = 15,
units = "cm", bg = "white",
dpi=300)
# Step 6: Visualize Clustering Results
cluster_summary <- data_nets_clusters %>%
bind_cols(umap_data) %>%
group_by(cluster) %>%
summarise(
count = n(),
across(starts_with("UMAP"), mean),
.groups = "drop"
)
print(cluster_summary)
# Step 6: Visualize Clustering Results
cluster_summary <- data_clusters %>%
bind_cols(umap_data) %>%
group_by(cluster) %>%
summarise(
count = n(),
across(starts_with("UMAP"), mean),
.groups = "drop"
)
print(cluster_summary)
data_nets_clusters_sum = data_nets_clusters%>%
bind_cols(umap_data) %>%
# filter(degree %in% 8:10) %>%
rename(N1 = sung_pitch1, N2 = sung_pitch2, N3 = sung_pitch3, N4 = sung_pitch4, N5 = sung_pitch5) %>%
pivot_longer(cols = N1:N5, names_to = "index", values_to = "pitch") %>%
group_by(network_id, cluster, index) %>%
dplyr::summarise(n=n(), av.pitch = mean(pitch, na.rm = T)) %>%
group_by(cluster, index) %>%
dplyr::summarise(
n=n(),
av = mean(av.pitch, na.rm = T),
sd = sd(av.pitch, na.rm = T),
se = sd/ sqrt(n)
)
data_nets_clusters_sum = data_clusters%>%
bind_cols(umap_data) %>%
# filter(degree %in% 8:10) %>%
rename(N1 = sung_pitch1, N2 = sung_pitch2, N3 = sung_pitch3, N4 = sung_pitch4, N5 = sung_pitch5) %>%
pivot_longer(cols = N1:N5, names_to = "index", values_to = "pitch") %>%
group_by(network_id, cluster, index) %>%
dplyr::summarise(n=n(), av.pitch = mean(pitch, na.rm = T)) %>%
group_by(cluster, index) %>%
dplyr::summarise(
n=n(),
av = mean(av.pitch, na.rm = T),
sd = sd(av.pitch, na.rm = T),
se = sd/ sqrt(n)
)
plot_clusters = data_nets_clusters_sum %>%
ggplot(aes(x=as.factor(index), y=av, group=cluster, fill=cluster)) +
geom_ribbon(aes(ymin=av-se, ymax=av+se),  alpha = 0.75) +
geom_line() +
facet_wrap(~cluster, nrow = 2) +
# ggtitle(z) +
theme(axis.text.x = element_text(size=10),
axis.text.y=element_text(size=10),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "right",
legend.text = element_text(size=12),
# legend.title = element_blank(),
plot.title = element_text(size=6))
plot_clusters
ggsave(paste0("UMAP_clusters_sd.png"),
plot_clusters,
height = 8, width = 18,
units = "cm",
dpi=300)
source("utils/plots.R")
# global parameters
loadNamespace("egg")
theme_set(theme_pubr())
MAX_INTERVAL_SIZE = 12
interval_range = c(-MAX_INTERVAL_SIZE,MAX_INTERVAL_SIZE)
vertical.lines = seq(from=min(interval_range), to=max(interval_range), by = 1)
# import data
# data_melodies <- read_csv("data/data-clean/sing-scales-v1/data-sing-scales-v1_full.csv")
data_melodies <- read_csv("data/data-clean/sing-scales-v1/data-sing-scales-v2_full.csv")
source("utils/key-operations.R")
# import data
# data_melodies <- read_csv("data/data-clean/sing-scales-v1/data-sing-scales-v1_full.csv")
data_melodies <- read_csv("data/data-clean/sing-scales-v2/data-sing-scales-v2_full.csv")
source("utils/key-operations.R")
################################################################################
# Tonality analysis
################################################################################
tonal_features_list <- apply_key_finding(
data_melodies,
major_profile_ALbrecht2013,
minor_profile_ALbrecht2013
# major_profile_KS,
# minor_profile_KS
)
tonal_features = do.call(rbind, tonal_features_list)
data_melodies$tonalness <- tonal_features$tonalness
data_melodies$tonal.clarity <- tonal_features$tonal.clarity
data_melodies$tonal.spike <- tonal_features$tonal.spike
data_melodies$mode <- tonal_features$mode
data_melodies$estimated_key <- tonal_features$estimated_key
# save data
write_csv(data_melodies, "data/data-clean/sing-scales-v2/data-sing-scales-v2_full_tonality.csv")
################################################################################
# histogram of estimated key
################################################################################
hist_key <- data_melodies %>%
select(id:degree, estimated_key) %>%
count(estimated_key) %>%
arrange(desc(n))
ggplot(hist_key, aes(x = reorder(estimated_key, -n), y = n)) +
geom_bar(stat = "identity") +
labs(x = "Estimated Key", y = "Number of Melodies", title = "Histogram of Estimated Keys") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggsave("results/hist_estimated_keys_Albrecht2013.png", width = 20, height = 15, units = "cm")
# over time
hist_key <- data_melodies %>%
select(id:degree, estimated_key) %>%
count(degree, estimated_key) %>%
arrange(desc(n))
hist_key_degree <- data_melodies %>%
select(id:degree, estimated_key) %>%
count(degree, estimated_key) %>%
arrange(desc(n))
ggplot(hist_key_degree, aes(x = reorder(estimated_key, -n), y = n)) +
geom_bar(stat = "identity") +
labs(x = "Estimated Key", y = "Number of Melodies", title = "Histogram of Melody Sequences") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  +
facet_wrap(~degree)
ggsave("results/hist_estimated_keys_Albrecht2013_evolution.png", width = 20, height = 15, units = "cm")
################################################################################
# interval between notes and key
################################################################################
diff_data <-  data_melodies %>%
select(id:degree, round_sung_pitch1:round_sung_pitch5, estimated_key, mode)  %>%
mutate(estimated_key_midi = note_to_midi_converter(estimated_key)) %>%
# mutate(diff_key_pitch1 = abs(round_sung_pitch1 - estimated_key_midi),
#        diff_key_pitch2 = abs(round_sung_pitch2 - estimated_key_midi),
#        diff_key_pitch3 = abs(round_sung_pitch3 - estimated_key_midi),
#        diff_key_pitch4 = abs(round_sung_pitch4 - estimated_key_midi),
#        diff_key_pitch5 = abs(round_sung_pitch5 - estimated_key_midi)) %>%
mutate(diff_key_pitch1 = estimated_key_midi - round_sung_pitch1,
diff_key_pitch2 = estimated_key_midi - round_sung_pitch2,
diff_key_pitch3 = estimated_key_midi - round_sung_pitch3,
diff_key_pitch4 = estimated_key_midi - round_sung_pitch4,
diff_key_pitch5 = estimated_key_midi - round_sung_pitch5) %>%
select(id:degree, estimated_key_midi, diff_key_pitch1:diff_key_pitch5)
diff_data_lonf <-  diff_data %>%
pivot_longer(cols = starts_with("diff_key_pitch"),
names_to = "interval_pos",
values_to = "interval")
NBOOT = 1000
BW = 0.25
interval_range = c(-14, 14)
vertical.lines = seq(from=min(interval_range), to=max(interval_range), by = 1)
marginals_interval_key = make_marginals_kde(diff_data_lonf, c("interval"), NBOOT, BW, "Note to Key interval")
marginals_interval_key
ggsave("results/notes_to_key_intervals_all_minus_trams.png", width = 14, height = 7, units = "cm")
marginals_melodies_intervals_separate = make_marginals_kde_separate_notes_to_key_intervals(
diff_data, c("diff_key_pitch1", "diff_key_pitch2", "diff_key_pitch3", "diff_key_pitch4", "diff_key_pitch5"), NBOOT, BW)
marginals_melodies_intervals_separate
NBOOT = 1000
BW = 0.25
interval_range = c(-14, 14)
vertical.lines = seq(from=min(interval_range), to=max(interval_range), by = 1)
marginals_interval_key = make_marginals_kde(diff_data_lonf, c("interval"), NBOOT, BW, "Note to Key interval")
marginals_interval_key
diff_data
################################################################################
# interval between notes and key
################################################################################
diff_data <-  data_melodies %>%
select(id:degree, round_sung_pitch1:round_sung_pitch5, estimated_key, mode)  %>%
mutate(estimated_key_midi = note_to_midi_converter(estimated_key)) %>%
mutate(diff_key_pitch1 = abs(round_sung_pitch1 - estimated_key_midi),
diff_key_pitch2 = abs(round_sung_pitch2 - estimated_key_midi),
diff_key_pitch3 = abs(round_sung_pitch3 - estimated_key_midi),
diff_key_pitch4 = abs(round_sung_pitch4 - estimated_key_midi),
diff_key_pitch5 = abs(round_sung_pitch5 - estimated_key_midi)) %>%
# mutate(diff_key_pitch1 = estimated_key_midi - round_sung_pitch1,
#        diff_key_pitch2 = estimated_key_midi - round_sung_pitch2,
#        diff_key_pitch3 = estimated_key_midi - round_sung_pitch3,
#        diff_key_pitch4 = estimated_key_midi - round_sung_pitch4,
#        diff_key_pitch5 = estimated_key_midi - round_sung_pitch5) %>%
select(id:degree, estimated_key_midi, diff_key_pitch1:diff_key_pitch5)
diff_data
################################################################################
# interval between notes and key
################################################################################
diff_data <-  data_melodies %>%
select(id:degree, round_sung_pitch1:round_sung_pitch5, estimated_key, mode)  %>%
mutate(estimated_key_midi = note_to_midi_converter(estimated_key)) %>%
mutate(diff_key_pitch1 = abs(round_sung_pitch1 - estimated_key_midi),
diff_key_pitch2 = abs(round_sung_pitch2 - estimated_key_midi),
diff_key_pitch3 = abs(round_sung_pitch3 - estimated_key_midi),
diff_key_pitch4 = abs(round_sung_pitch4 - estimated_key_midi),
diff_key_pitch5 = abs(round_sung_pitch5 - estimated_key_midi)) %>%
# mutate(diff_key_pitch1 = estimated_key_midi - round_sung_pitch1,
#        diff_key_pitch2 = estimated_key_midi - round_sung_pitch2,
#        diff_key_pitch3 = estimated_key_midi - round_sung_pitch3,
#        diff_key_pitch4 = estimated_key_midi - round_sung_pitch4,
#        diff_key_pitch5 = estimated_key_midi - round_sung_pitch5) %>%
select(id:degree, estimated_key_midi, diff_key_pitch1:diff_key_pitch5)
diff_data_lonf <-  diff_data %>%
pivot_longer(cols = starts_with("diff_key_pitch"),
names_to = "interval_pos",
values_to = "interval")
NBOOT = 1000
BW = 0.25
interval_range = c(-14, 14)
vertical.lines = seq(from=min(interval_range), to=max(interval_range), by = 1)
marginals_interval_key = make_marginals_kde(diff_data_lonf, c("interval"), NBOOT, BW, "Note to Key interval")
marginals_interval_key
interval_range = c(0, 15)
vertical.lines = seq(from=min(interval_range), to=max(interval_range), by = 1)
marginals_interval_key = make_marginals_kde(diff_data_lonf, c("interval"), NBOOT, BW, "Note to Key interval")
marginals_interval_key
ggsave("results/notes_to_key_intervals_all_minus_trams.png", width = 14, height = 7, units = "cm")
marginals_melodies_intervals_separate = make_marginals_kde_separate_notes_to_key_intervals(
diff_data,
c("diff_key_pitch1", "diff_key_pitch2", "diff_key_pitch3", "diff_key_pitch4", "diff_key_pitch5"),
NBOOT, BW)
marginals_melodies_intervals_separate
ggsave("results/notes_to_key_intervals_minus_trans.png",  dpi = 300)
################################################################################
# tonality features over time
################################################################################
# calculate summary stats tonal features
tonality_data = data_melodies %>%
group_by(degree) %>%
summarise(
n = n(),
mean_tonalness = mean(tonalness, na.rm = T),
sd_tonalness = sd(tonalness, na.rm = T),
se_tonalness = sd_tonalness/sqrt(n),
mean_tonal.clarity = mean(tonal.clarity, na.rm = T),
sd_tonal.clarity = sd(tonal.clarity, na.rm = T),
se_sd_tonal.clarity = sd_tonal.clarity/sqrt(n),
mean_tonal.spike = mean(tonal.spike, na.rm = T),
sd_tonal.spike = sd(tonal.spike, na.rm = T),
se_tonal.spike = sd_tonal.spike/sqrt(n)
)
# plot tonal features
plot_tonalness = tonality_data %>%
ggplot(aes(x= degree, y = mean_tonalness)) +
# plot line
geom_line()+
# plot standard deviation (SD) around the line
geom_ribbon(aes(ymin=mean_tonalness - se_tonalness,
ymax=mean_tonalness + se_tonalness),
alpha = 0.4)  +
# plot points
geom_point(size = 2, shape=21) +
scale_x_continuous(breaks=c(0,1,2,3,4,5,6,7,8,9,10)) +
# add labels
ylab("Tonalness") +
xlab("Iteration") +
ggtitle("Tonalness") +
theme_classic() +
theme(legend.position = "none")
plot_tona.clarity = tonality_data %>%
ggplot(aes(x= degree, y = mean_tonal.clarity)) +
geom_line()+
geom_ribbon(aes(ymin=mean_tonal.clarity - se_sd_tonal.clarity,
ymax=mean_tonal.clarity + se_sd_tonal.clarity),
alpha = 0.4)  +
geom_point(size = 2, shape=21) +
scale_x_continuous(breaks=c(0,1,2,3,4,5,6,7,8,9,10)) +
ylab("Tonal Clarity") +
xlab("Iteration") +
ggtitle("Tonal Clarity") +
theme_classic() +
theme(legend.position = "none")
plot_tona.spike = tonality_data %>%
ggplot(aes(x= degree, y = mean_tonal.spike)) +
geom_line()+
geom_ribbon(aes(ymin=mean_tonal.spike - se_tonal.spike,
ymax=mean_tonal.spike + se_tonal.spike),
alpha = 0.4)  +
geom_point(size = 2, shape=21) +
scale_x_continuous(breaks=c(0,1,2,3,4,5,6,7,8,9,10)) +
ylab("Tonal Spike") +
xlab("Iteration") +
ggtitle("Tonal Spike") +
theme_classic() +
theme(legend.position = "none")
tonal.results = plot_grid(plot_tonalness, plot_tona.clarity, plot_tona.spike, nrow = 1)
tonal.results
ggsave("results/evolution_tonal.results_Albrecht2013.png", tonal.results, width = 20, height = 8, units = "cm")
################################################################################
# test recency
################################################################################
data_recency = data_melodies %>%
select(id:degree, round_sung_pitch1:round_sung_pitch5, estimated_key, mode)  %>%
mutate(estimated_key_midi = note_to_midi_converter(estimated_key)) %>%
mutate(end_in_tonic = ifelse(round_sung_pitch5==estimated_key_midi, 1, 0)) %>%
mutate(start_in_tonic = ifelse(round_sung_pitch1==estimated_key_midi, 1, 0)) %>%
mutate(diff_key_pitch1 = abs(round_sung_pitch1 - estimated_key_midi),
diff_key_pitch2 = abs(round_sung_pitch2 - estimated_key_midi),
diff_key_pitch3 = abs(round_sung_pitch3 - estimated_key_midi),
diff_key_pitch4 = abs(round_sung_pitch4 - estimated_key_midi),
diff_key_pitch5 = abs(round_sung_pitch5 - estimated_key_midi))
data_recency %>%
count(degree, end_in_tonic) %>%
filter(end_in_tonic == 1) %>%
mutate(percent = (n/100)*100)
data_recency %>%
group_by(degree) %>%
summarise(
mean_diff_key_pitch1 = mean(diff_key_pitch1),
mean_diff_key_pitch2 = mean(diff_key_pitch2),
mean_diff_key_pitch3 = mean(diff_key_pitch3),
mean_diff_key_pitch4 = mean(diff_key_pitch4),
mean_diff_key_pitch5 = mean(diff_key_pitch5)
)
data_recency %>%
count(degree, end_in_tonic) %>%
filter(end_in_tonic == 1) %>%
mutate(percent = (n/100)*100)
