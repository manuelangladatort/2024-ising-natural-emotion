x = "Degree",
y = "Percentage"
) +
theme_minimal()
plot_grid(plot_end_with_key, plot_start_with_key, nrow = 1)
# difference between key and pitch
data_summary <- data_recency %>%
group_by(degree) %>%
summarise(
mean_diff_key_pitch1 = mean(diff_key_pitch1),
mean_diff_key_pitch2 = mean(diff_key_pitch2),
mean_diff_key_pitch3 = mean(diff_key_pitch3),
mean_diff_key_pitch4 = mean(diff_key_pitch4),
mean_diff_key_pitch5 = mean(diff_key_pitch5)
)
# Normalize each pitch column to start from the same value (subtract first value of each pitch)
data_normalized <- data_summary %>%
mutate(
mean_diff_key_pitch1 = mean_diff_key_pitch1 - mean_diff_key_pitch1[1],
mean_diff_key_pitch2 = mean_diff_key_pitch2 - mean_diff_key_pitch2[1],
mean_diff_key_pitch3 = mean_diff_key_pitch3 - mean_diff_key_pitch3[1],
mean_diff_key_pitch4 = mean_diff_key_pitch4 - mean_diff_key_pitch4[1],
mean_diff_key_pitch5 = mean_diff_key_pitch5 - mean_diff_key_pitch5[1]
)
# Reshape the data into long format for ggplot
data_long <- data_normalized %>%
tidyr::pivot_longer(
cols = starts_with("mean_diff_key_pitch"),
names_to = "pitch",
values_to = "mean_diff"
)
# Adjust legend labels by removing 'mean_diff_key_' prefix
data_long <- data_long %>%
mutate(pitch = gsub("mean_diff_key_pitch", "note", pitch))
# Create the line plot
ggplot(data_long, aes(x = degree, y = mean_diff, color = pitch, group = pitch)) +
geom_line(size = 1) +
geom_point(size = 2) +
labs(
# title = "Normalized Mean Difference from Key by Degree",
x = "Degree",
y = "Mean difference (normalized)",
color = "Pitch"
) +
theme_minimal() +
theme(
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
axis.title = element_text(size = 12)
)
data_recency = data_melodies %>%
# round pitches
mutate(across(starts_with("sung_pitch"), round, .names = "round_{.col}")) %>%
select(id:degree, round_sung_pitch1:round_sung_pitch5, estimated_key, mode)  %>%
mutate(estimated_key_midi = note_to_midi_converter(estimated_key))
data_recency
data_melodies %>%
# transpose
mutate(sung_pitch1 = ifelse(register == "low", (sung_pitch1+12), sung_pitch1),
sung_pitch2 = ifelse(register == "low", (sung_pitch2+12), sung_pitch2),
sung_pitch3 = ifelse(register == "low", (sung_pitch3+12), sung_pitch3),
sung_pitch4 = ifelse(register == "low", (sung_pitch4+12), sung_pitch4),
sung_pitch5 = ifelse(register == "low", (sung_pitch5+12), sung_pitch5))
data_melodies %>%
select(id:degree, register, sung_pitch1:sung_pitch5, estimated_key, estimated_tonic, mode)
data_melodies %>%
select(id:degree, register, sung_pitch1:sung_pitch5, estimated_key, estimated_tonic, mode)  %>%
# transpose
mutate(sung_pitch1 = ifelse(register == "low", (sung_pitch1+12), sung_pitch1),
sung_pitch2 = ifelse(register == "low", (sung_pitch2+12), sung_pitch2),
sung_pitch3 = ifelse(register == "low", (sung_pitch3+12), sung_pitch3),
sung_pitch4 = ifelse(register == "low", (sung_pitch4+12), sung_pitch4),
sung_pitch5 = ifelse(register == "low", (sung_pitch5+12), sung_pitch5))
data_melodies %>%
select(id:degree, register, sung_pitch1:sung_pitch5, estimated_key, estimated_tonic, mode)  %>%
# transpose
mutate(sung_pitch1 = ifelse(register == "low", (sung_pitch1+12), sung_pitch1),
sung_pitch2 = ifelse(register == "low", (sung_pitch2+12), sung_pitch2),
sung_pitch3 = ifelse(register == "low", (sung_pitch3+12), sung_pitch3),
sung_pitch4 = ifelse(register == "low", (sung_pitch4+12), sung_pitch4),
sung_pitch5 = ifelse(register == "low", (sung_pitch5+12), sung_pitch5)) %>%
# round pitches
mutate(across(starts_with("sung_pitch"), round, .names = "round_{.col}"))
data_melodies %>%
select(id:degree, register, sung_pitch1:sung_pitch5, estimated_key, estimated_tonic, mode)  %>%
# transpose
mutate(sung_pitch1 = ifelse(register == "low", (sung_pitch1+12), sung_pitch1),
sung_pitch2 = ifelse(register == "low", (sung_pitch2+12), sung_pitch2),
sung_pitch3 = ifelse(register == "low", (sung_pitch3+12), sung_pitch3),
sung_pitch4 = ifelse(register == "low", (sung_pitch4+12), sung_pitch4),
sung_pitch5 = ifelse(register == "low", (sung_pitch5+12), sung_pitch5)) %>%
# round pitches
mutate(across(starts_with("sung_pitch"), round, .names = "round_{.col}")) %>%
select(id:degree, round_sung_pitch1:round_sung_pitch5, estimated_key, mode)
data_melodies %>%
select(id:degree, register, sung_pitch1:sung_pitch5, estimated_key, estimated_tonic, mode)  %>%
mutate(estimated_key_midi = note_to_midi_converter(estimated_key)) %>%
# transpose
mutate(sung_pitch1 = ifelse(register == "low", (sung_pitch1+12), sung_pitch1),
sung_pitch2 = ifelse(register == "low", (sung_pitch2+12), sung_pitch2),
sung_pitch3 = ifelse(register == "low", (sung_pitch3+12), sung_pitch3),
sung_pitch4 = ifelse(register == "low", (sung_pitch4+12), sung_pitch4),
sung_pitch5 = ifelse(register == "low", (sung_pitch5+12), sung_pitch5)) %>%
# round pitches
mutate(across(starts_with("sung_pitch"), round, .names = "round_{.col}")) %>%
select(id:degree, round_sung_pitch1:round_sung_pitch5, estimated_key, estimated_key_midi, mode)
################################################################################
# test recency
################################################################################
# TODO: add recency analysis
data_recency = data_melodies %>%
select(id:degree, register, sung_pitch1:sung_pitch5, estimated_key, estimated_tonic, mode)  %>%
mutate(estimated_key_midi = note_to_midi_converter(estimated_key)) %>%
# transpose
mutate(sung_pitch1 = ifelse(register == "low", (sung_pitch1+12), sung_pitch1),
sung_pitch2 = ifelse(register == "low", (sung_pitch2+12), sung_pitch2),
sung_pitch3 = ifelse(register == "low", (sung_pitch3+12), sung_pitch3),
sung_pitch4 = ifelse(register == "low", (sung_pitch4+12), sung_pitch4),
sung_pitch5 = ifelse(register == "low", (sung_pitch5+12), sung_pitch5)) %>%
# round pitches
mutate(across(starts_with("sung_pitch"), round, .names = "round_{.col}")) %>%
select(id:degree, round_sung_pitch1:round_sung_pitch5, estimated_key, estimated_key_midi, mode)  %>%
mutate(end_in_tonic = ifelse(round_sung_pitch5==estimated_key_midi, 1, 0)) %>%
mutate(start_in_tonic = ifelse(round_sung_pitch1==estimated_key_midi, 1, 0)) %>%
mutate(diff_key_pitch1 = abs(round_sung_pitch1 - estimated_key_midi),
diff_key_pitch2 = abs(round_sung_pitch2 - estimated_key_midi),
diff_key_pitch3 = abs(round_sung_pitch3 - estimated_key_midi),
diff_key_pitch4 = abs(round_sung_pitch4 - estimated_key_midi),
diff_key_pitch5 = abs(round_sung_pitch5 - estimated_key_midi))
data_summary_end <- data_recency %>%
count(degree, end_in_tonic) %>%
filter(end_in_tonic == 1) %>%
group_by(degree) %>%
summarize(
mean_percent = mean((n/100)*100),
se_percent = sd((n/100)*100) / sqrt(n())
)
data_summary_start <- data_recency %>%
count(degree, start_in_tonic) %>%
filter(start_in_tonic == 1) %>%
group_by(degree) %>%
summarize(
mean_percent = mean((n/100)*100),
se_percent = sd((n/100)*100) / sqrt(n())
)
plot_end_with_key = ggplot(data_summary_end, aes(x = degree, y = mean_percent)) +
geom_line() +
geom_point() +
geom_ribbon(aes(ymin = mean_percent - se_percent, ymax = mean_percent + se_percent), alpha = 0.2) +
ylim(0, 100) +
labs(
title = "Tonic in last note",
x = "Degree",
y = "Percentage"
) +
theme_minimal()
plot_start_with_key = ggplot(data_summary_start, aes(x = degree, y = mean_percent)) +
geom_line() +
geom_point() +
geom_ribbon(aes(ymin = mean_percent - se_percent, ymax = mean_percent + se_percent), alpha = 0.2) +
ylim(0, 100) +
labs(
title = "Tonic in first note",
x = "Degree",
y = "Percentage"
) +
theme_minimal()
plot_grid(plot_end_with_key, plot_start_with_key, nrow = 1)
# difference between key and pitch
data_summary <- data_recency %>%
group_by(degree) %>%
summarise(
mean_diff_key_pitch1 = mean(diff_key_pitch1),
mean_diff_key_pitch2 = mean(diff_key_pitch2),
mean_diff_key_pitch3 = mean(diff_key_pitch3),
mean_diff_key_pitch4 = mean(diff_key_pitch4),
mean_diff_key_pitch5 = mean(diff_key_pitch5)
)
# Normalize each pitch column to start from the same value (subtract first value of each pitch)
data_normalized <- data_summary %>%
mutate(
mean_diff_key_pitch1 = mean_diff_key_pitch1 - mean_diff_key_pitch1[1],
mean_diff_key_pitch2 = mean_diff_key_pitch2 - mean_diff_key_pitch2[1],
mean_diff_key_pitch3 = mean_diff_key_pitch3 - mean_diff_key_pitch3[1],
mean_diff_key_pitch4 = mean_diff_key_pitch4 - mean_diff_key_pitch4[1],
mean_diff_key_pitch5 = mean_diff_key_pitch5 - mean_diff_key_pitch5[1]
)
# Reshape the data into long format for ggplot
data_long <- data_normalized %>%
tidyr::pivot_longer(
cols = starts_with("mean_diff_key_pitch"),
names_to = "pitch",
values_to = "mean_diff"
)
# Adjust legend labels by removing 'mean_diff_key_' prefix
data_long <- data_long %>%
mutate(pitch = gsub("mean_diff_key_pitch", "note", pitch))
# Create the line plot
ggplot(data_long, aes(x = degree, y = mean_diff, color = pitch, group = pitch)) +
geom_line(size = 1) +
geom_point(size = 2) +
labs(
# title = "Normalized Mean Difference from Key by Degree",
x = "Degree",
y = "Mean difference (normalized)",
color = "Pitch"
) +
theme_minimal() +
theme(
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
axis.title = element_text(size = 12)
)
data_melodies %>%
select(id:degree, register, sung_pitch1:sung_pitch5, estimated_key, estimated_tonic, mode)  %>%
mutate(estimated_key_midi = note_to_midi_converter(estimated_key)) %>%
# transpose
mutate(sung_pitch1 = ifelse(register == "low", (sung_pitch1+12), sung_pitch1),
sung_pitch2 = ifelse(register == "low", (sung_pitch2+12), sung_pitch2),
sung_pitch3 = ifelse(register == "low", (sung_pitch3+12), sung_pitch3),
sung_pitch4 = ifelse(register == "low", (sung_pitch4+12), sung_pitch4),
sung_pitch5 = ifelse(register == "low", (sung_pitch5+12), sung_pitch5)) %>%
# round pitches
mutate(across(starts_with("sung_pitch"), round, .names = "round_{.col}"))
data_melodies %>%
select(id:degree, register, sung_pitch1:sung_pitch5, estimated_key, estimated_tonic, mode)  %>%
mutate(estimated_key_midi = note_to_midi_converter(estimated_key)) %>%
# transpose
mutate(sung_pitch1 = ifelse(register == "low", (sung_pitch1+12), sung_pitch1),
sung_pitch2 = ifelse(register == "low", (sung_pitch2+12), sung_pitch2),
sung_pitch3 = ifelse(register == "low", (sung_pitch3+12), sung_pitch3),
sung_pitch4 = ifelse(register == "low", (sung_pitch4+12), sung_pitch4),
sung_pitch5 = ifelse(register == "low", (sung_pitch5+12), sung_pitch5))
################################################################################
# test recency
################################################################################
# TODO: add recency analysis
data_recency = data_melodies %>%
select(id:degree, register, sung_pitch1:sung_pitch5, estimated_key, estimated_tonic, mode)  %>%
mutate(estimated_key_midi = note_to_midi_converter(estimated_key)) %>%
# transpose
mutate(sung_pitch1 = ifelse(register == "low", (sung_pitch1+12), sung_pitch1),
sung_pitch2 = ifelse(register == "low", (sung_pitch2+12), sung_pitch2),
sung_pitch3 = ifelse(register == "low", (sung_pitch3+12), sung_pitch3),
sung_pitch4 = ifelse(register == "low", (sung_pitch4+12), sung_pitch4),
sung_pitch5 = ifelse(register == "low", (sung_pitch5+12), sung_pitch5)) %>%
# mutate(end_in_tonic = ifelse(round_sung_pitch5==estimated_key_midi, 1, 0)) %>%
# mutate(start_in_tonic = ifelse(round_sung_pitch1==estimated_key_midi, 1, 0)) %>%
mutate(diff_key_pitch1 = abs(sung_pitch1 - estimated_key_midi),
diff_key_pitch2 = abs(sung_pitch2 - estimated_key_midi),
diff_key_pitch3 = abs(sung_pitch3 - estimated_key_midi),
diff_key_pitch4 = abs(sung_pitch4 - estimated_key_midi),
diff_key_pitch5 = abs(sung_pitch5 - estimated_key_midi))
data_summary_end <- data_recency %>%
count(degree, end_in_tonic) %>%
filter(end_in_tonic == 1) %>%
group_by(degree) %>%
summarize(
mean_percent = mean((n/100)*100),
se_percent = sd((n/100)*100) / sqrt(n())
)
data_summary_start <- data_recency %>%
count(degree, start_in_tonic) %>%
filter(start_in_tonic == 1) %>%
group_by(degree) %>%
summarize(
mean_percent = mean((n/100)*100),
se_percent = sd((n/100)*100) / sqrt(n())
)
plot_end_with_key = ggplot(data_summary_end, aes(x = degree, y = mean_percent)) +
geom_line() +
geom_point() +
geom_ribbon(aes(ymin = mean_percent - se_percent, ymax = mean_percent + se_percent), alpha = 0.2) +
ylim(0, 100) +
labs(
title = "Tonic in last note",
x = "Degree",
y = "Percentage"
) +
theme_minimal()
plot_start_with_key = ggplot(data_summary_start, aes(x = degree, y = mean_percent)) +
geom_line() +
geom_point() +
geom_ribbon(aes(ymin = mean_percent - se_percent, ymax = mean_percent + se_percent), alpha = 0.2) +
ylim(0, 100) +
labs(
title = "Tonic in first note",
x = "Degree",
y = "Percentage"
) +
theme_minimal()
plot_grid(plot_end_with_key, plot_start_with_key, nrow = 1)
# difference between key and pitch
data_summary <- data_recency %>%
group_by(degree) %>%
summarise(
mean_diff_key_pitch1 = mean(diff_key_pitch1),
mean_diff_key_pitch2 = mean(diff_key_pitch2),
mean_diff_key_pitch3 = mean(diff_key_pitch3),
mean_diff_key_pitch4 = mean(diff_key_pitch4),
mean_diff_key_pitch5 = mean(diff_key_pitch5)
)
# Normalize each pitch column to start from the same value (subtract first value of each pitch)
data_normalized <- data_summary %>%
mutate(
mean_diff_key_pitch1 = mean_diff_key_pitch1 - mean_diff_key_pitch1[1],
mean_diff_key_pitch2 = mean_diff_key_pitch2 - mean_diff_key_pitch2[1],
mean_diff_key_pitch3 = mean_diff_key_pitch3 - mean_diff_key_pitch3[1],
mean_diff_key_pitch4 = mean_diff_key_pitch4 - mean_diff_key_pitch4[1],
mean_diff_key_pitch5 = mean_diff_key_pitch5 - mean_diff_key_pitch5[1]
)
# Reshape the data into long format for ggplot
data_long <- data_normalized %>%
tidyr::pivot_longer(
cols = starts_with("mean_diff_key_pitch"),
names_to = "pitch",
values_to = "mean_diff"
)
# Adjust legend labels by removing 'mean_diff_key_' prefix
data_long <- data_long %>%
mutate(pitch = gsub("mean_diff_key_pitch", "note", pitch))
# Create the line plot
ggplot(data_long, aes(x = degree, y = mean_diff, color = pitch, group = pitch)) +
geom_line(size = 1) +
geom_point(size = 2) +
labs(
# title = "Normalized Mean Difference from Key by Degree",
x = "Degree",
y = "Mean difference (normalized)",
color = "Pitch"
) +
theme_minimal() +
theme(
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
axis.title = element_text(size = 12)
)
data_recency
data_recency
# difference between key and pitch
data_summary <- data_recency %>%
group_by(degree) %>%
summarise(
mean_diff_key_pitch1 = mean(diff_key_pitch1),
mean_diff_key_pitch2 = mean(diff_key_pitch2),
mean_diff_key_pitch3 = mean(diff_key_pitch3),
mean_diff_key_pitch4 = mean(diff_key_pitch4),
mean_diff_key_pitch5 = mean(diff_key_pitch5)
)
data_summary
# Normalize each pitch column to start from the same value (subtract first value of each pitch)
data_normalized <- data_summary %>%
mutate(
mean_diff_key_pitch1 = mean_diff_key_pitch1 - mean_diff_key_pitch1[1],
mean_diff_key_pitch2 = mean_diff_key_pitch2 - mean_diff_key_pitch2[1],
mean_diff_key_pitch3 = mean_diff_key_pitch3 - mean_diff_key_pitch3[1],
mean_diff_key_pitch4 = mean_diff_key_pitch4 - mean_diff_key_pitch4[1],
mean_diff_key_pitch5 = mean_diff_key_pitch5 - mean_diff_key_pitch5[1]
)
data_normalized
# Reshape the data into long format for ggplot
data_long <- data_normalized %>%
tidyr::pivot_longer(
cols = starts_with("mean_diff_key_pitch"),
names_to = "pitch",
values_to = "mean_diff"
)
data_long
# Adjust legend labels by removing 'mean_diff_key_' prefix
data_long <- data_long %>%
mutate(pitch = gsub("mean_diff_key_pitch", "note", pitch))
# Create the line plot
ggplot(data_long, aes(x = degree, y = mean_diff, color = pitch, group = pitch)) +
geom_line(size = 1) +
geom_point(size = 2) +
labs(
# title = "Normalized Mean Difference from Key by Degree",
x = "Degree",
y = "Mean difference (normalized)",
color = "Pitch"
) +
theme_minimal() +
theme(
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
axis.title = element_text(size = 12)
)
data_melodies %>%
select(id:degree, register, sung_pitch1:sung_pitch5, estimated_key, estimated_tonic, mode)  %>%
mutate(estimated_key_midi = note_to_midi_converter(estimated_key))
data_melodies %>%
select(id:degree, register, sung_pitch1:sung_pitch5, estimated_key, estimated_tonic, mode)  %>%
mutate(estimated_key_midi = note_to_midi_converter(estimated_key)) %>%
# transpose
mutate(sung_pitch1 = ifelse(register == "low", (sung_pitch1+12), sung_pitch1),
sung_pitch2 = ifelse(register == "low", (sung_pitch2+12), sung_pitch2),
sung_pitch3 = ifelse(register == "low", (sung_pitch3+12), sung_pitch3),
sung_pitch4 = ifelse(register == "low", (sung_pitch4+12), sung_pitch4),
sung_pitch5 = ifelse(register == "low", (sung_pitch5+12), sung_pitch5)) %>%
data_melodies %>%
select(id:degree, register, sung_pitch1:sung_pitch5, estimated_key, estimated_tonic, mode)  %>%
mutate(estimated_key_midi = note_to_midi_converter(estimated_key)) %>%
# transpose
mutate(sung_pitch1 = ifelse(register == "low", (sung_pitch1+12), sung_pitch1),
sung_pitch2 = ifelse(register == "low", (sung_pitch2+12), sung_pitch2),
sung_pitch3 = ifelse(register == "low", (sung_pitch3+12), sung_pitch3),
sung_pitch4 = ifelse(register == "low", (sung_pitch4+12), sung_pitch4),
sung_pitch5 = ifelse(register == "low", (sung_pitch5+12), sung_pitch5))
data_melodies %>%
select(id:degree, register, sung_pitch1:sung_pitch5, estimated_key, estimated_tonic, mode)  %>%
mutate(estimated_key_midi = note_to_midi_converter(estimated_key)) %>%
# transpose
mutate(sung_pitch1 = ifelse(register == "low", (sung_pitch1+12), sung_pitch1),
sung_pitch2 = ifelse(register == "low", (sung_pitch2+12), sung_pitch2),
sung_pitch3 = ifelse(register == "low", (sung_pitch3+12), sung_pitch3),
sung_pitch4 = ifelse(register == "low", (sung_pitch4+12), sung_pitch4),
sung_pitch5 = ifelse(register == "low", (sung_pitch5+12), sung_pitch5))
data_melodies %>%
select(id:degree, register, sung_pitch1:sung_pitch5, estimated_key, estimated_tonic, mode)  %>%
mutate(estimated_key_midi = note_to_midi_converter(estimated_key)) %>%
# transpose
mutate(sung_pitch1 = ifelse(register == "low", (sung_pitch1+12), sung_pitch1),
sung_pitch2 = ifelse(register == "low", (sung_pitch2+12), sung_pitch2),
sung_pitch3 = ifelse(register == "low", (sung_pitch3+12), sung_pitch3),
sung_pitch4 = ifelse(register == "low", (sung_pitch4+12), sung_pitch4),
sung_pitch5 = ifelse(register == "low", (sung_pitch5+12), sung_pitch5)) %>%
# mutate(end_in_tonic = ifelse(round_sung_pitch5==estimated_key_midi, 1, 0)) %>%
# mutate(start_in_tonic = ifelse(round_sung_pitch1==estimated_key_midi, 1, 0)) %>%
mutate(diff_key_pitch1 = abs(sung_pitch1 - estimated_key_midi),
diff_key_pitch2 = abs(sung_pitch2 - estimated_key_midi),
diff_key_pitch3 = abs(sung_pitch3 - estimated_key_midi),
diff_key_pitch4 = abs(sung_pitch4 - estimated_key_midi),
diff_key_pitch5 = abs(sung_pitch5 - estimated_key_midi))
################################################################################
# test recency
################################################################################
# TODO: add recency analysis
data_recency = data_melodies %>%
select(id:degree, register, sung_pitch1:sung_pitch5, estimated_key, estimated_tonic, mode)  %>%
mutate(estimated_key_midi = note_to_midi_converter(estimated_key)) %>%
# transpose
mutate(sung_pitch1 = ifelse(register == "low", (sung_pitch1+12), sung_pitch1),
sung_pitch2 = ifelse(register == "low", (sung_pitch2+12), sung_pitch2),
sung_pitch3 = ifelse(register == "low", (sung_pitch3+12), sung_pitch3),
sung_pitch4 = ifelse(register == "low", (sung_pitch4+12), sung_pitch4),
sung_pitch5 = ifelse(register == "low", (sung_pitch5+12), sung_pitch5)) %>%
# mutate(end_in_tonic = ifelse(round_sung_pitch5==estimated_key_midi, 1, 0)) %>%
# mutate(start_in_tonic = ifelse(round_sung_pitch1==estimated_key_midi, 1, 0)) %>%
mutate(diff_key_pitch1 = abs(sung_pitch1 - estimated_key_midi),
diff_key_pitch2 = abs(sung_pitch2 - estimated_key_midi),
diff_key_pitch3 = abs(sung_pitch3 - estimated_key_midi),
diff_key_pitch4 = abs(sung_pitch4 - estimated_key_midi),
diff_key_pitch5 = abs(sung_pitch5 - estimated_key_midi))
# difference between key and pitch
data_summary <- data_recency %>%
group_by(degree) %>%
summarise(
mean_diff_key_pitch1 = mean(diff_key_pitch1),
mean_diff_key_pitch2 = mean(diff_key_pitch2),
mean_diff_key_pitch3 = mean(diff_key_pitch3),
mean_diff_key_pitch4 = mean(diff_key_pitch4),
mean_diff_key_pitch5 = mean(diff_key_pitch5)
)
# Reshape the data into long format for ggplot
data_long <- data_summary %>%
tidyr::pivot_longer(
cols = starts_with("mean_diff_key_pitch"),
names_to = "pitch",
values_to = "mean_diff"
)
# Adjust legend labels by removing 'mean_diff_key_' prefix
data_long <- data_long %>%
mutate(pitch = gsub("mean_diff_key_pitch", "note", pitch))
# Create the line plot
ggplot(data_long, aes(x = degree, y = mean_diff, color = pitch, group = pitch)) +
geom_line(size = 1) +
geom_point(size = 2) +
labs(
# title = "Normalized Mean Difference from Key by Degree",
x = "Degree",
y = "Mean difference (normalized)",
color = "Pitch"
) +
theme_minimal() +
theme(
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
axis.title = element_text(size = 12)
)
data_melodies
data_melodies %>%
select(id:degree, register, sung_pitch1:sung_pitch5, estimated_key, estimated_tonic, mode)  %>%
mutate(estimated_key_midi = note_to_midi_converter(estimated_key)) %>%
# transpose
mutate(sung_pitch1 = ifelse(register == "low", (sung_pitch1+12), sung_pitch1),
sung_pitch2 = ifelse(register == "low", (sung_pitch2+12), sung_pitch2),
sung_pitch3 = ifelse(register == "low", (sung_pitch3+12), sung_pitch3),
sung_pitch4 = ifelse(register == "low", (sung_pitch4+12), sung_pitch4),
sung_pitch5 = ifelse(register == "low", (sung_pitch5+12), sung_pitch5))
################################################################################
# test recency
################################################################################
data_recency = data_melodies %>%
select(id:degree, round_sung_pitch1:round_sung_pitch5, estimated_key, mode)  %>%
mutate(estimated_key_midi = note_to_midi_converter(estimated_key)) %>%
mutate(end_in_tonic = ifelse(round_sung_pitch5==estimated_key_midi, 1, 0)) %>%
mutate(start_in_tonic = ifelse(round_sung_pitch1==estimated_key_midi, 1, 0)) %>%
mutate(diff_key_pitch1 = abs(round_sung_pitch1 - estimated_key_midi),
diff_key_pitch2 = abs(round_sung_pitch2 - estimated_key_midi),
diff_key_pitch3 = abs(round_sung_pitch3 - estimated_key_midi),
diff_key_pitch4 = abs(round_sung_pitch4 - estimated_key_midi),
diff_key_pitch5 = abs(round_sung_pitch5 - estimated_key_midi))
