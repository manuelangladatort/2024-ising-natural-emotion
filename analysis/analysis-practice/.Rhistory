BW,
boot_over,
interval_range
)
plot = data_kde_last3 %>% ggplot(aes(x)) +
scale_x_continuous(breaks=seq(min(vertical.lines), max(vertical.lines), 1),
limits = c(min(vertical.lines), max(vertical.lines)))  +
geom_vline(xintercept = vertical.lines, colour = "lightgrey", linetype="dashed") +
geom_ribbon(aes(ymin = avg - sdev, ymax = avg + sdev), alpha = .4, fill = "grey") +
geom_line(aes(y = avg), color="black", size =  0.7) +
# add peaks
# xlab("vname") +
ylab("density") +
# ylim(0, 0.5) +
ggtitle(title) +
theme_classic() +
theme(axis.text.x = element_text(size=6),
axis.text.y=element_text(size=6),
title = element_text(size=8),
axis.title.x = element_blank())
plot
data_kde_last3 %>% ggplot(aes(x)) +
scale_x_continuous(breaks=seq(min(vertical.lines), max(vertical.lines), 1),
limits = c(min(vertical.lines), max(vertical.lines)))  +
geom_vline(xintercept = vertical.lines, colour = "lightgrey", linetype="dashed") +
geom_ribbon(aes(ymin = avg - sdev, ymax = avg + sdev), alpha = .4, fill = "grey") +
geom_line(aes(y = avg), color="black", size =  0.7) +
# add peaks
# xlab("vname") +
ylab("density") +
# ylim(0, 0.5) +
ggtitle(title) +
theme_classic() +
theme(axis.text.x = element_text(size=6),
axis.text.y=element_text(size=6),
title = element_text(size=8),
axis.title.x = element_blank()
)
data_kde_last3
data_kde_last3 %>% ggplot(aes(x)) +
scale_x_continuous(breaks=seq(min(vertical.lines), max(vertical.lines), 1),
limits = c(min(vertical.lines), max(vertical.lines)))
data_kde_last3 %>% ggplot(aes(x)) +
scale_x_continuous(breaks=seq(min(vertical.lines), max(vertical.lines), 1),
limits = c(min(vertical.lines), max(vertical.lines)))  +
geom_vline(xintercept = vertical.lines, colour = "lightgrey", linetype="dashed") +
geom_ribbon(aes(ymin = avg - sdev, ymax = avg + sdev), alpha = .4, fill = "grey")
data_kde_last3 %>% ggplot(aes(x)) +
scale_x_continuous(breaks=seq(min(vertical.lines), max(vertical.lines), 1),
limits = c(min(vertical.lines), max(vertical.lines)))  +
geom_vline(xintercept = vertical.lines, colour = "lightgrey", linetype="dashed") +
geom_ribbon(aes(ymin = avg - sdev, ymax = avg + sdev), alpha = .4, fill = "grey") +
geom_line(aes(y = avg), color="black", size =  0.7)
data_kde_last3 %>% ggplot(aes(x)) +
scale_x_continuous(breaks=seq(min(vertical.lines), max(vertical.lines), 1),
limits = c(min(vertical.lines), max(vertical.lines)))  +
geom_vline(xintercept = vertical.lines, colour = "lightgrey", linetype="dashed") +
geom_ribbon(aes(ymin = avg - sdev, ymax = avg + sdev), alpha = .4, fill = "grey") +
geom_line(aes(y = avg), color="black", size =  0.7) +
# add peaks
# xlab("vname") +
ylab("density") +
# ylim(0, 0.5) +
ggtitle(title) +
theme_classic()
plot = data_kde_last3 %>% ggplot(aes(x)) +
scale_x_continuous(breaks=seq(min(vertical.lines), max(vertical.lines), 1),
limits = c(min(vertical.lines), max(vertical.lines)))  +
geom_vline(xintercept = vertical.lines, colour = "lightgrey", linetype="dashed") +
geom_ribbon(aes(ymin = avg - sdev, ymax = avg + sdev), alpha = .4, fill = "grey") +
geom_line(aes(y = avg), color="black", size =  0.7) +
# add peaks
# xlab("vname") +
ylab("density") +
# ylim(0, 0.5) +
ggtitle("Distribution of intervals") +
theme_classic() +
theme(axis.text.x = element_text(size=6),
axis.text.y=element_text(size=6),
title = element_text(size=8),
axis.title.x = element_blank())
plot
# Plot the distribution of intervals with standard deviations around the average density value.
# It also draws vertical reference lines at integer interval values.
plot = data_kde_last3 %>%
ggplot(aes(x)) +
scale_x_continuous(
breaks = seq(min(vertical.lines), max(vertical.lines), by = 1),
limits = c(min(vertical.lines), max(vertical.lines))
) +
geom_vline(
xintercept = vertical.lines,
colour = "lightgrey",
linetype = "dashed"
) +
geom_ribbon(
aes(ymin = avg - sdev, ymax = avg + sdev),
fill = "grey",
alpha = 0.4
) +
geom_line(
aes(y = avg),
color = "black",
size = 0.7
) +
ylab("density") +
ggtitle("Distribution of intervals") +
theme_classic() +
theme(
axis.text.x = element_text(size = 6),
axis.text.y = element_text(size = 6),
title = element_text(size = 8),
axis.title.x = element_blank()
)
return(plot)
plot
# function to calculate the KDE
make_marginals_kde = function(data, sung_intervals, n_samples, bw,  title, boot_over = "chains"){
# select last 3 iterations + create a long format
data_last3_long = data %>%
filter(degree %in% 8:10)  %>%
select(degree, network_id, sung_interval1:sung_interval4) %>%
pivot_longer(sung_interval1:sung_interval4, names_to = "interval", values_to = "sung_intervals")
# Apply KDE bootrapping over transsmision chains to obtain the denbsity distribution of intervals
data_kde_last3 = kde_bootstrap_1d(data_last3_long,
100,
"sung_intervals",
bw,
boot_over,
interval_range
)
# Plot the distribution of intervals with standard deviations around the average density value.
# It also draws vertical reference lines at integer interval values.
plot = data_kde_last3 %>%
ggplot(aes(x)) +
scale_x_continuous(
breaks = seq(min(vertical.lines), max(vertical.lines), by = 1),
limits = c(min(vertical.lines), max(vertical.lines))
) +
geom_vline(
xintercept = vertical.lines,
colour = "lightgrey",
linetype = "dashed"
) +
geom_ribbon(
aes(ymin = avg - sdev, ymax = avg + sdev),
fill = "grey",
alpha = 0.4
) +
geom_line(
aes(y = avg),
color = "black",
size = 0.7
) +
ylab("density") +
ggtitle("Distribution of intervals") +
theme_classic() +
theme(
axis.text.x = element_text(size = 6),
axis.text.y = element_text(size = 6),
title = element_text(size = 8),
axis.title.x = element_blank()
)
return(plot)
}
################################################################################
# ANALALYSIS: DISTRIBUTION OF INTERVALS
################################################################################
# parameters for the analysis
NBOOT = 1000 # number of iterations for the KDE
BW = 0.25 # bandwidth for the KDE
# plotting
MAX_INTERVAL_SIZE = 15 # max interval size in semitones
interval_range = c(-MAX_INTERVAL_SIZE,MAX_INTERVAL_SIZE) # range of intervals
vertical.lines = seq(from=min(interval_range), to=max(interval_range), by = 1) # vertical lines indicating integer semitones
# We need to import a custom function to run the KDE (Kernel density estimation) over the distribution of intervals
source("methods/kde_bootstrap_1d.R")
# function to calculate the KDE
make_marginals_kde = function(data, sung_intervals, n_samples, bw,  title, boot_over = "chains"){
# select last 3 iterations + create a long format
data_last3_long = data %>%
filter(degree %in% 8:10)  %>%
select(degree, network_id, sung_interval1:sung_interval4) %>%
pivot_longer(sung_interval1:sung_interval4, names_to = "interval", values_to = "sung_intervals")
# Apply KDE bootrapping over transsmision chains to obtain the denbsity distribution of intervals
data_kde_last3 = kde_bootstrap_1d(data_last3_long,
100,
"sung_intervals",
bw,
boot_over,
interval_range
)
# Plot the distribution of intervals with standard deviations around the average density value.
# It also draws vertical reference lines at integer interval values.
plot = data_kde_last3 %>%
ggplot(aes(x)) +
scale_x_continuous(
breaks = seq(min(vertical.lines), max(vertical.lines), by = 1),
limits = c(min(vertical.lines), max(vertical.lines))
) +
geom_vline(
xintercept = vertical.lines,
colour = "lightgrey",
linetype = "dashed"
) +
geom_ribbon(
aes(ymin = avg - sdev, ymax = avg + sdev),
fill = "grey",
alpha = 0.4
) +
geom_line(
aes(y = avg),
color = "black",
size = 0.7
) +
ylab("density") +
ggtitle("Distribution of intervals") +
theme_classic() +
theme(
axis.text.x = element_text(size = 6),
axis.text.y = element_text(size = 6),
title = element_text(size = 8),
axis.title.x = element_blank()
)
return(plot)
}
# prepare data for analysis
data_melodies_long_intervals =  data_melodies %>%
select(id:participant_id, sung_interval1:sung_interval4) %>%
pivot_longer(cols = starts_with("sung_interval"),
names_to = "interval_pos",
values_to = "interval")
data_melodies_long_intervals
plot_kde_melodies_intervals = make_marginals_kde(data_melodies_long_intervals, c("interval"), NBOOT, BW, "marginals")
# see
plot_kde_melodies_intervals
data_melodies_long_intervals
# plot the distribution of intervals
plot_kde_melodies_intervals = make_marginals_kde(data_melodies_long_intervals, c("interval"), NBOOT, BW, "marginals")
data_melodies_long_intervals
# plot the distribution of intervals
plot_kde_melodies_intervals = make_marginals_kde(data_melodies, c("interval"), NBOOT, BW, "marginals")
# see
plot_kde_melodies_intervals
NBOOT
# plot the distribution of intervals
plot_kde_melodies_intervals = make_marginals_kde(data_melodies, c("interval"), NBOOT, 0.5, "marginals")
# see
plot_kde_melodies_intervals
# plot the distribution of intervals
plot_kde_melodies_intervals = make_marginals_kde(data_melodies, c("interval"), NBOOT, 0.2, "marginals")
# see
plot_kde_melodies_intervals
# plot the distribution of intervals
plot_kde_melodies_intervals = make_marginals_kde(data_melodies, c("interval"), NBOOT, BW, "marginals")
# see
plot_kde_melodies_intervals
BW = 0.2 # bandwidth for the KDE
# plot the distribution of intervals
plot_kde_melodies_intervals = make_marginals_kde(data_melodies, c("interval"), NBOOT, BW, "marginals")
# see
plot_kde_melodies_intervals
BW = 0.25 # bandwidth for the KDE
# plot the distribution of intervals
plot_kde_melodies_intervals = make_marginals_kde(data_melodies, c("interval"), NBOOT, BW, "marginals")
# see
plot_kde_melodies_intervals
# save
ggsave("results/marginals_intervals.png", width = 12, height = 7, units = "cm")
# save
ggsave("distribution_intervals.png", width = 12, height = 7, units = "cm")
# save
ggsave("distribution_intervals.png", width = 14, height = 7, units = "cm")
################################################################################
# GLOBAL PARAMETERS
################################################################################
# import packages
library(tidyverse) # for data manipulation
library(cowplot) # for plots
# import raw data: target melodies and vocal productions (sung melodies)
data_melodies <- read_csv("data-sing-scales-v2_full_tonality.csv")
# import raw data: target melodies and vocal productions (sung melodies)
data_melodies <- read_csv("data/data-sing-scales-v2_full_tonality.csv")
head(data_melodies)
length(unique(data_melodies$participant_id)) # N participants
length(unique(data_melodies$network_id)) # N transmission chains
################################################################################
# ANALALYSIS: ERROR
################################################################################
# calculate the mean interval error over generations
error_data = data_melodies %>%
group_by(degree) %>%
summarise(
n = n(),
mean_pitch_interval_error = mean(root_mean_squared_interval, na.rm = T),
sd_pitch_interval_error = sd(root_mean_squared_interval, na.rm = T),
se_pitch_interval_error = sd_pitch_interval_error/sqrt(n),
mean_ISI_error = mean(ISI_rms_error, na.rm = T),
sd_ISI_error = sd(ISI_rms_error, na.rm = T),
se_ISI_error = sd_ISI_error/sqrt(n)
)
# plot pitch interval error
plot_pitch_interval_error = error_data %>%
ggplot(aes(x= degree, y = mean_pitch_interval_error)) +
geom_line()+
geom_ribbon(aes(ymin=mean_pitch_interval_error - se_pitch_interval_error,
ymax=mean_pitch_interval_error + se_pitch_interval_error),
alpha = 0.4)  +
geom_point(size = 2, shape=21) +
scale_x_continuous(breaks=c(1,2,3,4,5,6,7,8,9,10, 11)) +
ylab("Interval error (semitones)") +
xlab("Iteration") +
ggtitle("Pitch (interval)") +
theme_classic() +
theme(legend.position = "none")
plot_pitch_interval_error
# plot note duration error
plot_ISI_error = error_data %>%
ggplot(aes(x= degree, y = mean_ISI_error)) +
geom_line()+
geom_ribbon(aes(ymin=mean_ISI_error - se_ISI_error,
ymax=mean_ISI_error + se_ISI_error),
alpha = 0.4)  +
geom_point(size = 2, shape=21) +
scale_x_continuous(breaks=c(1,2,3,4,5,6,7,8,9,10, 11)) +
ylab("IOI error (seconds)") +
xlab("Iteration") +
ggtitle("Rhythm (Inter-Onset-Interval)") +
theme_classic() +
theme(legend.position = "none")
plot_ISI_error
plot_grid(plot_pitch_interval_error, plot_ISI_error, nrow = 1)
pitch_error_model <- lm(mean_pitch_interval_error ~ degree, error_data)
summary(pitch_error_model)
ISI_error_model <- lm(mean_ISI_error ~ degree, error_data)
summary(ISI_error_model)
pitch_error_model_t <- lm(root_mean_squared_interval ~ degree * mode, data_melodies)
summary(pitch_error_model_t)
ISI_error_model_t <- lm(ISI_rms_error ~ degree * mode, data_melodies)
summary(ISI_error_model_t)
################################################################################
# ANALALYSIS: DISTRIBUTION OF INTERVALS
################################################################################
# parameters for the analysis
NBOOT = 1000 # number of iterations for the KDE
BW = 0.25 # bandwidth for the KDE
# plotting
MAX_INTERVAL_SIZE = 15 # max interval size in semitones
interval_range = c(-MAX_INTERVAL_SIZE,MAX_INTERVAL_SIZE) # range of intervals
vertical.lines = seq(from=min(interval_range), to=max(interval_range), by = 1) # vertical lines indicating integer semitones
# We need to import a custom function to run the KDE (Kernel density estimation) over the distribution of intervals
source("kde_bootstrap_1d.R")
# We need to import a custom function to run the KDE (Kernel density estimation) over the distribution of intervals
source("methods/kde_bootstrap_1d.R")
# function to calculate the KDE
make_marginals_kde = function(data, sung_intervals, n_samples, bw,  title, boot_over = "chains"){
# select last 3 iterations + create a long format
data_last3_long = data %>%
filter(degree %in% 8:10)  %>%
select(degree, network_id, sung_interval1:sung_interval4) %>%
pivot_longer(sung_interval1:sung_interval4, names_to = "interval", values_to = "sung_intervals")
# Apply KDE bootstrapping over transmission chains to obtain the density distribution of intervals
data_kde_last3 = kde_bootstrap_1d(data_last3_long,
100,
"sung_intervals",
bw,
boot_over,
interval_range
)
# Plot the distribution of intervals with standard deviations around the average density value.
# It also draws vertical reference lines at integer interval values.
plot = data_kde_last3 %>%
ggplot(aes(x)) +
scale_x_continuous(
breaks = seq(min(vertical.lines), max(vertical.lines), by = 1),
limits = c(min(vertical.lines), max(vertical.lines))
) +
geom_vline(
xintercept = vertical.lines,
colour = "lightgrey",
linetype = "dashed"
) +
geom_ribbon(
aes(ymin = avg - sdev, ymax = avg + sdev),
fill = "grey",
alpha = 0.4
) +
geom_line(
aes(y = avg),
color = "black",
size = 0.7
) +
ylab("density") +
ggtitle("Distribution of intervals") +
theme_classic() +
theme(
axis.text.x = element_text(size = 6),
axis.text.y = element_text(size = 6),
title = element_text(size = 8),
axis.title.x = element_blank()
)
return(plot)
}
# function to calculate the KDE
make_marginals_kde = function(data, sung_intervals, n_samples, bw,  title, boot_over = "chains"){
# select last 3 iterations + create a long format
data_last3_long = data %>%
filter(degree %in% 8:10)  %>%
select(degree, network_id, sung_interval1:sung_interval4) %>%
pivot_longer(sung_interval1:sung_interval4, names_to = "interval", values_to = "sung_intervals")
# Apply KDE bootstrapping over transmission chains to obtain the density distribution of intervals
data_kde_last3 = kde_bootstrap_1d(data_last3_long,
100,
"sung_intervals",
bw,
boot_over,
interval_range
)
# Plot the distribution of intervals with standard deviations around the average density value.
# It also draws vertical reference lines at integer interval values.
plot = data_kde_last3 %>%
ggplot(aes(x)) +
scale_x_continuous(
breaks = seq(min(vertical.lines), max(vertical.lines), by = 1),
limits = c(min(vertical.lines), max(vertical.lines))
) +
geom_vline(
xintercept = vertical.lines,
colour = "lightgrey",
linetype = "dashed"
) +
geom_ribbon(
aes(ymin = avg - sdev, ymax = avg + sdev),
fill = "grey",
alpha = 0.4
) +
geom_line(
aes(y = avg),
color = "black",
size = 0.7
) +
ylab("density") +
ggtitle("Distribution of intervals") +
theme_classic() +
theme(
axis.text.x = element_text(size = 6),
axis.text.y = element_text(size = 6),
title = element_text(size = 8),
axis.title.x = element_blank()
)
return(plot)
}
# plot the distribution of intervals
plot_kde_melodies_intervals = make_marginals_kde(data_melodies, c("interval"), NBOOT, BW, "marginals")
# see
plot_kde_melodies_intervals
# Function to calculate KDE for each mode
make_kde_by_mode = function(data, bw, nboot, interval_range, vertical.lines) {
data_long = data %>%
filter(degree %in% 8:10) %>%
select(degree, network_id, sung_interval1:sung_interval4, mode) %>%
pivot_longer(sung_interval1:sung_interval4, names_to = "interval", values_to = "sung_intervals")
# Compute KDE for each mode
kde_results = data_long %>%
group_by(mode) %>%
group_modify(~ kde_bootstrap_1d(.x, nboot, "sung_intervals", bw, "chains", interval_range)) %>%
ungroup()
# Plot
plot = kde_results %>%
ggplot(aes(x, color = mode, fill = mode)) +
scale_x_continuous(
breaks = seq(min(vertical.lines), max(vertical.lines), by = 1),
limits = c(min(vertical.lines), max(vertical.lines))
) +
geom_vline(
xintercept = vertical.lines,
colour = "lightgrey",
linetype = "dashed"
) +
geom_ribbon(
aes(ymin = avg - sdev, ymax = avg + sdev, fill = mode),
alpha = 0.3
) +
geom_line(
aes(y = avg),
size = 0.7
) +
ylab("density") +
ggtitle("Distribution of Intervals by Mode") +
theme_classic() +
theme(
axis.text.x = element_text(size = 6),
axis.text.y = element_text(size = 6),
title = element_text(size = 8),
axis.title.x = element_blank()
)
return(plot)
}
# Generate and save the KDE by mode
plot_kde_by_mode = make_kde_by_mode(data_melodies, BW, NBOOT, interval_range, vertical.lines)
plot_kde_by_mode
# Kolmogorov-Smirnov test to compare distributions
data_long = data_melodies %>%
filter(degree %in% 8:10) %>%
select(degree, network_id, sung_interval1:sung_interval4, mode) %>%
pivot_longer(sung_interval1:sung_interval4, names_to = "interval", values_to = "sung_intervals")
# Separate intervals by mode
major_intervals = data_long %>% filter(mode == "major") %>% pull(sung_intervals)
minor_intervals = data_long %>% filter(mode == "minor") %>% pull(sung_intervals)
# KS test
ks_test_result = ks.test(major_intervals, minor_intervals)
print(ks_test_result)
