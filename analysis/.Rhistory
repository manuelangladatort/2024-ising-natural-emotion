geom_line(aes(color = Metric), size = 1) +
geom_ribbon(aes(ymin = ymin, ymax = ymax, fill = Metric), alpha = 0.2) +
facet_wrap(~Metric, scales = "free_y") +
labs(x = "Degree", y = "Error") +
scale_x_continuous(breaks=c(0,1,2,3,4,5,6,7,8,9,10)) +
theme_classic() +
scale_color_manual(values = c("m_interval_error" = "blue", "m_IOI_ratio_error" = "red")) +
scale_fill_manual(values = c("m_interval_error" = "blue", "m_IOI_ratio_error" = "red")) +
theme(legend.position = "none")
plot_error
# entropy
data_entropy_aggregate_long <- data_features_aggregate %>%
filter(degree < 11) %>%
pivot_longer(cols = c(m_entropy_interval, m_entropy_ratio_IOI),
names_to = "Metric",
values_to = "Error") %>%
mutate(SD = ifelse(Metric == "m_entropy_interval", sd_entropy_interval, sd_entropy_ratio_IOI),
ymin = Error - SD,
ymax = Error + SD)
# Plot with facet_wrap
plot_entropy <- ggplot(data_entropy_aggregate_long, aes(x = degree, y = Error)) +
geom_line(aes(color = Metric), size = 1) +
geom_ribbon(aes(ymin = ymin, ymax = ymax, fill = Metric), alpha = 0.2) +
facet_wrap(~Metric, scales = "free_y") +
labs(x = "Degree", y = "Error") +
theme_classic() +
scale_x_continuous(breaks=c(0,1,2,3,4,5,6,7,8,9,10)) +
scale_color_manual(values = c("m_entropy_interval" = "blue", "m_entropy_ratio_IOI" = "red")) +
scale_fill_manual(values = c("m_entropy_interval" = "blue", "m_entropy_ratio_IOI" = "red")) +
theme(legend.position = "none")
plot_entropy
data_features_aggregate
data_features_aggregate
data_features_aggregate
get_entropy_resolution = function(data, resolution){
intervals = data %>%
select(degree, interval)
H.int_store = c()
# entropy
dat_h_int <- round(intervals$interval / resolution) * resolution
H.int = categorical_entropy(dat_h_int)
H.int_store = c(H.int_store, H.int)
return(H.int_store)
}
################################################################################
# Trends: Error & Entropy (bootstrapping)
################################################################################
NBOOT = 10
# get error and entropy via bootstrap
data_melodies_features_boot = get_bootstrapped_features_freenote_melody(
data_melodies_free_ratios,
NBOOT
)
data_features_aggregate = data_melodies_features_boot %>%
group_by(degree) %>%
summarise(
n = n(),
m_interval_error = mean(mean_interval_error),
sd_error = sd(mean_interval_error, na.rm = T),
m_IOI_ratio_error = mean(rms_error_ratios),
sd_IOI_ratio_error = sd(rms_error_ratios, na.rm = T),
m_entropy_interval = mean(entropy_interval),
sd_entropy_interval = sd(entropy_interval, na.rm = T),
m_entropy_ratio_IOI = mean(entropy_IOI),
sd_entropy_ratio_IOI = sd(entropy_IOI, na.rm = T)
)
data_features_aggregate
################################################################################
# Trends: Error & Entropy (bootstrapping)
################################################################################
NBOOT = 100
# get error and entropy via bootstrap
data_melodies_features_boot = get_bootstrapped_features_freenote_melody(
data_melodies_free_ratios,
NBOOT
)
data_features_aggregate = data_melodies_features_boot %>%
group_by(degree) %>%
summarise(
n = n(),
m_interval_error = mean(mean_interval_error),
sd_error = sd(mean_interval_error, na.rm = T),
m_IOI_ratio_error = mean(rms_error_ratios),
sd_IOI_ratio_error = sd(rms_error_ratios, na.rm = T),
m_entropy_interval = mean(entropy_interval),
sd_entropy_interval = sd(entropy_interval, na.rm = T),
m_entropy_ratio_IOI = mean(entropy_IOI),
sd_entropy_ratio_IOI = sd(entropy_IOI, na.rm = T)
)
# error
data_error_aggregate_long <- data_features_aggregate %>%
filter(degree < 11) %>%
pivot_longer(cols = c(m_interval_error, m_IOI_ratio_error),
names_to = "Metric",
values_to = "Error") %>%
mutate(SD = ifelse(Metric == "m_interval_error", sd_error, sd_IOI_ratio_error),
ymin = Error - SD,
ymax = Error + SD)
# Plot with facet_wrap
plot_error <- ggplot(data_error_aggregate_long, aes(x = degree, y = Error)) +
geom_line(aes(color = Metric), size = 1) +
geom_ribbon(aes(ymin = ymin, ymax = ymax, fill = Metric), alpha = 0.2) +
facet_wrap(~Metric, scales = "free_y") +
labs(x = "Degree", y = "Error") +
scale_x_continuous(breaks=c(0,1,2,3,4,5,6,7,8,9,10)) +
theme_classic() +
scale_color_manual(values = c("m_interval_error" = "blue", "m_IOI_ratio_error" = "red")) +
scale_fill_manual(values = c("m_interval_error" = "blue", "m_IOI_ratio_error" = "red")) +
theme(legend.position = "none")
plot_error
ggsave("results/figure3/evolution_error.png", width = 12, height = 6,  units = "cm", bg = "white")
# entropy
data_entropy_aggregate_long <- data_features_aggregate %>%
filter(degree < 11) %>%
pivot_longer(cols = c(m_entropy_interval, m_entropy_ratio_IOI),
names_to = "Metric",
values_to = "Error") %>%
mutate(SD = ifelse(Metric == "m_entropy_interval", sd_entropy_interval, sd_entropy_ratio_IOI),
ymin = Error - SD,
ymax = Error + SD)
# Plot with facet_wrap
plot_entropy <- ggplot(data_entropy_aggregate_long, aes(x = degree, y = Error)) +
geom_line(aes(color = Metric), size = 1) +
geom_ribbon(aes(ymin = ymin, ymax = ymax, fill = Metric), alpha = 0.2) +
facet_wrap(~Metric, scales = "free_y") +
labs(x = "Degree", y = "Error") +
theme_classic() +
scale_x_continuous(breaks=c(0,1,2,3,4,5,6,7,8,9,10)) +
scale_color_manual(values = c("m_entropy_interval" = "blue", "m_entropy_ratio_IOI" = "red")) +
scale_fill_manual(values = c("m_entropy_interval" = "blue", "m_entropy_ratio_IOI" = "red")) +
theme(legend.position = "none")
plot_entropy
ggsave("results/figure3/evolution_entropy.png", width = 12, height = 6, units = "cm", bg = "white")
# mean number noters over time
btw_free_all_sum = data_melodies_free %>%
group_by(degree) %>%
dplyr::summarise(
n=n(),
mean_num_pitches = mean(num_sung_pitches, na.rm = T),
median_num_pitches = median(num_sung_pitches, na.rm = T),
sd_num_pitches = sd(num_sung_pitches, na.rm = T),
se = sd_num_pitches/sqrt(n)
)
plot_mean_notes = btw_free_all_sum %>%
filter(degree < 11) %>%
mutate(degree=as.factor(degree)) %>%
ggplot(aes(degree, mean_num_pitches, group=1)) +
geom_line() +
geom_ribbon(aes(ymin=mean_num_pitches-se,
ymax=mean_num_pitches+se),
fill = "#0072B2", alpha = 0.3) +
geom_point(fill = "white", size = 2, shape=21) +
# scale_y_continuous(breaks=seq(6,9,1),limits=c(6,8.5)) +
xlab("Iteration") +
ylab("Mean number of notes") +
geom_hline(aes(yintercept = 8), linetype="dashed")  +
theme(aspect.ratio = 1,
axis.text.x = element_text(size=10),
axis.text.y=element_text(size=10),
legend.position = "none",
legend.title = element_blank())
plot_mean_notes
# histogram of notes
btw_free_all_sum = data_melodies_free %>%
group_by(degree, num_sung_pitches) %>%
dplyr::summarise(
n =n()
) %>%
filter(degree != 0 )
seed = tibble(
degree= rep(0, 9),
num_sung_pitches = seq(4,12,1),
n = rep(24, 9)  # all melodies started with 24 chains
)
btw_free_all_sum_all = rbind(btw_free_all_sum, seed)
btw_free_all_sum_sum = btw_free_all_sum_all %>%
mutate(
gg = case_when(
degree == 0 ~ "Iteration 0 (seed)",
degree < 4 ~ "Iteration 1-3",
degree < 7 ~ "Iteration 4-7",
degree < 11 ~ "Iteration 8-10"
)
) %>%
group_by(num_sung_pitches, gg) %>%
dplyr::summarise(mean_n = mean(n), sd_n = sd(n), se_n = sd_n/sqrt(n()))
hist_lenght = btw_free_all_sum_sum %>%
drop_na(gg) %>%
filter(num_sung_pitches < 13) %>%
ggplot(aes(x=as.factor(num_sung_pitches), y=mean_n,
fill=as.factor(num_sung_pitches)))+
geom_bar(stat="identity", color="black") +
geom_errorbar(aes(ymin=mean_n-se_n, ymax=mean_n+se_n), width=.2,
position=position_dodge(.9)) +
theme(legend.position = "none") +
scale_fill_viridis_d(option = "D", direction = 1) +
xlab("Number of notes") +
ylab("Frequency")  +
geom_hline(aes(yintercept = 24), linetype="dashed",color="black") +
theme(axis.text.x = element_text(size=8),
axis.text.y=element_text(size=8),
legend.position = "none",
legend.title = element_blank()) +
facet_wrap(~gg, nrow = 1)
hist_lenght
################################################################################
# Distributions of individual scales
################################################################################
pitch_classes_ref <- c("C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B")
# Transpose so that the first MIDI note becomes 60 (Middle C)
transpose_midi_to_C <- function(midi_vec) {
if (length(midi_vec) == 0 || any(is.na(midi_vec))) return(NA)
shift <- 60 - midi_vec[1]
midi_vec + shift
}
# Convert MIDI to pitch class
midi_to_pitch_class <- function(midi_note) {
pitch_classes_ref[(midi_note %% 12) + 1]
}
# Create signature from sorted pitch classes
create_scale_signature <- function(pitch_classes) {
pcs_unique <- unique(pitch_classes)
ordered <- pitch_classes_ref[pitch_classes_ref %in% pcs_unique]
paste(ordered, collapse = "-")
}
# Main pipeline
hist_scales_data <- data_melodies_free %>%
filter(degree %in% 8:10) %>%
select(id:participant_id, register, num_sung_pitches, sung_pitches) %>%
mutate(sung_pitches = str_split(sung_pitches, ",")) %>%
mutate(sung_pitches_round = map(sung_pitches, ~ round(as.numeric(.x)))) %>%
mutate(transposed_midi = map(sung_pitches_round, transpose_midi_to_C)) %>%
mutate(transposed_pc = map(transposed_midi, midi_to_pitch_class)) %>%
mutate(scale_signature = map_chr(transposed_pc, create_scale_signature)) %>%
count(scale_signature) %>%
arrange(desc(n)) %>%
slice_head(n = 10)
# Plot
ggplot(hist_scales_data, aes(x = reorder(scale_signature, -n), y = n)) +
geom_bar(stat = "identity") +
labs(x = "Scale Signature", y = "Number of Melodies") +
theme(
axis.text.x = element_text(size= 8, angle = 90, hjust = 1),
axis.text.y = element_text(size= 8),
axis.title.x = element_text(size= 10),
axis.title.y = element_text(size= 10),
)
ggsave("results/figure3/distribution_scales.png", width = 10, height = 7, units = "cm", bg = "white")
################################################################################
# Entropy of scales
################################################################################
compute_entropy <- function(freqs) {
probs <- freqs / sum(freqs)
entropy::entropy(probs, unit = "log2")
}
# Bootstrap entropy function
bootstrap_entropy <- function(scale_counts, n_boot = 1000) {
total <- sum(scale_counts)
boot_entropies <- replicate(n_boot, {
boot_sample <- sample(rep(names(scale_counts), scale_counts), total, replace = TRUE)
boot_freqs <- table(boot_sample)
compute_entropy(boot_freqs)
})
tibble(
mean_entropy = mean(boot_entropies),
sd_entropy = sd(boot_entropies),
lower_ci = quantile(boot_entropies, 0.025),
upper_ci = quantile(boot_entropies, 0.975)
)
}
# Main pipeline with bootstrap + entropy + CI
entropy_over_iterations <- data_melodies_free %>%
select(degree, sung_pitches) %>%
mutate(
sung_pitches_vec = map(sung_pitches, ~ round(as.numeric(str_split(.x, ",")[[1]]))),
transposed_midi = map(sung_pitches_vec, transpose_midi_to_C),
transposed_pc = map(transposed_midi, midi_to_pitch_class),
scale_signature = map_chr(transposed_pc, create_scale_signature)
) %>%
group_by(degree, scale_signature) %>%
summarise(n = n(), .groups = "drop") %>%
group_by(degree) %>%
summarise(
entropy_ci = list(bootstrap_entropy(setNames(n, scale_signature))),
.groups = "drop"
) %>%
unnest(entropy_ci)
# plot
entropy_over_iterations %>%
filter(degree < 11) %>%
ggplot(aes(x = degree, y = mean_entropy)) +
geom_line() +
geom_ribbon(aes(ymin=mean_entropy-sd_entropy,
ymax=mean_entropy+sd_entropy),
fill = "#0072B2", alpha = 0.3) +
geom_point(fill = "white", size = 2, shape=21) +
labs(x = "Iteration", y = "Shannon Entropy") +
theme_classic() +
scale_x_continuous(breaks = seq(0, 10, 1))  +
theme(
axis.text.x = element_text(size= 8),
axis.text.y = element_text(size= 8),
axis.title.x = element_text(size= 10),
axis.title.y = element_text(size= 10),
)
ggsave("results/figure3/entropy_scales.png", width = 7, height = 7, units = "cm", bg = "white")
################################################################################
# Distribution of numbers of scale degrees
################################################################################
scale_size_distribution <- data_melodies_free %>%
filter(degree %in% 8:10) %>%
select(degree, sung_pitches) %>%
mutate(
sung_pitches_vec = map(sung_pitches, ~ round(as.numeric(str_split(.x, ",")[[1]]))),
transposed_midi = map(sung_pitches_vec, transpose_midi_to_C),
transposed_pc = map(transposed_midi, midi_to_pitch_class),
scale_size = map_int(transposed_pc, ~ length(unique(.x)))
) %>%
count(scale_size)
scale_size_distribution %>%
ggplot(aes(x = scale_size, y = n)) +
geom_bar(stat = "identity") +
labs(x = "Number of Scale Degrees", y = "Number of Melodies") +
scale_x_continuous(breaks = seq(2, 11, 1))  +
theme_classic() +
theme(
axis.text.x = element_text(size= 8),
axis.text.y = element_text(size= 8),
axis.title.x = element_text(size= 10),
axis.title.y = element_text(size= 10),
)
ggsave("results/figure3/distribution_scale_size.png", width = 7, height = 7, units = "cm", bg = "white")
# over time
scale_size_distribution <- data_melodies_free %>%
# filter(degree %in% 8:10) %>%
select(degree, sung_pitches) %>%
mutate(
sung_pitches_vec = map(sung_pitches, ~ round(as.numeric(str_split(.x, ",")[[1]]))),
transposed_midi = map(sung_pitches_vec, transpose_midi_to_C),
transposed_pc = map(transposed_midi, midi_to_pitch_class),
scale_size = map_int(transposed_pc, ~ length(unique(.x)))
) %>%
count(degree, scale_size)
scale_size_distribution %>%
filter(degree %in% c(0,2,4,6,8,10)) %>%
ggplot(aes(x = scale_size, y = n)) +
geom_bar(stat = "identity") +
labs(x = "Number of Scale Degrees", y = "Number of Melodies") +
scale_x_continuous(breaks = seq(2, 11, 1))  +
theme_classic() +
theme(
axis.text.x = element_text(size= 8),
axis.text.y = element_text(size= 8),
axis.title.x = element_text(size= 10),
axis.title.y = element_text(size= 10),
) +
facet_wrap(~ degree, nrow = 1)
data_error_aggregate_long
################################################################################
# Iterated singing (tonality & scales)
# Script: figure 1 - Emergence of melodic and rhythmic structures increase learnability.
################################################################################
# import
library(tidyverse)
library(egg)
library(ggpubr)
library(cowplot)
source("utils/plots.R")
source("utils/features.R")
# global
loadNamespace("egg")
theme_set(theme_pubr())
# data
data_melodies <- read_csv("data/final-data/sing-scales-v2/data-sing-scales-v2_full.csv")
length(table(data_melodies$participant_id))
length(table(data_melodies$network_id))
length(table(data_melodies$degree))
table(data_melodies$degree)
# marginals of ratios between adjacent IOIs
data_melodies_ratios = data_melodies %>%
select(id:participant_id, sung_pitch1:sung_pitch5,
sung_IOI1:sung_IOI4, sung_interval1:sung_interval4,
target_IOI1:target_IOI4,root_mean_squared_interval, ISI_rms_error) %>%
mutate(
sung_ratio1 = sung_IOI1/(sung_IOI1+sung_IOI2),
sung_ratio2 = sung_IOI2/(sung_IOI2+sung_IOI3),
sung_ratio3 = sung_IOI3/(sung_IOI3+sung_IOI4),
target_ratio1 = target_IOI1/(target_IOI1+target_IOI2),
target_ratio2 = target_IOI2/(target_IOI2+target_IOI3),
target_ratio3 = target_IOI3/(target_IOI3+target_IOI4)
)
################################################################################
# Trends: Error & Entropy (bootstrapping)
################################################################################
NBOOT = 1000
vars_sung_pitches = c("sung_pitch1", "sung_pitch2", "sung_pitch3", "sung_pitch4", "sung_pitch5")
vars_sung_intervals = c("sung_interval1", "sung_interval2", "sung_interval3", "sung_interval4")
vars_sung_IOIratios = c("sung_ratio1", "sung_ratio2", "sung_ratio3")
vars_target_IOIratios = c("target_ratio1", "target_ratio2", "target_ratio3")
# get error and entropy via bootstrap
data_melodies_features_boot = get_bootstrapped_features_melody(
data_melodies_ratios,
vars_sung_pitches,
vars_sung_intervals,
vars_sung_IOIratios,
NBOOT
)
################################################################################
# Trends: Error & Entropy (bootstrapping)
################################################################################
NBOOT = 100
vars_sung_pitches = c("sung_pitch1", "sung_pitch2", "sung_pitch3", "sung_pitch4", "sung_pitch5")
vars_sung_intervals = c("sung_interval1", "sung_interval2", "sung_interval3", "sung_interval4")
vars_sung_IOIratios = c("sung_ratio1", "sung_ratio2", "sung_ratio3")
vars_target_IOIratios = c("target_ratio1", "target_ratio2", "target_ratio3")
# get error and entropy via bootstrap
data_melodies_features_boot = get_bootstrapped_features_melody(
data_melodies_ratios,
vars_sung_pitches,
vars_sung_intervals,
vars_sung_IOIratios,
NBOOT
)
# plot
data_features_aggregate = data_melodies_features_boot %>%
group_by(degree) %>%
summarise(
n = n(),
m_interval_error = mean(mean_interval_error),
sd_error = sd(mean_interval_error, na.rm = T),
m_rms_error_ratios = mean(rms_error_ratios),
sd_rms_error_ratios = sd(rms_error_ratios, na.rm = T),
m_entropy_interval = mean(entropy_interval),
sd_entropy_interval = sd(entropy_interval, na.rm = T),
m_entropy_ratio_IOI = mean(entropy_IOI),
sd_entropy_ratio_IOI = sd(entropy_IOI, na.rm = T)
)
data_melodies_features_boot
# plot
data_features_aggregate = data_melodies_features_boot %>%
group_by(degree) %>%
summarise(
n = n(),
m_interval_error = mean(mean_interval_error),
sd_error = sd(mean_interval_error, na.rm = T),
m_rms_error_ratios = mean(rms_error_ratios),
sd_rms_error_ratios = sd(rms_error_ratios, na.rm = T),
m_entropy_interval = mean(entropy_interval),
sd_entropy_interval = sd(entropy_interval, na.rm = T),
m_entropy_ratio_IOI = mean(entropy_IOI),
sd_entropy_ratio_IOI = sd(entropy_IOI, na.rm = T)
)
data_melodies_features_boot
# plot
data_features_aggregate = data_melodies_features_boot %>%
group_by(degree) %>%
summarise(
n = n(),
m_interval_error = mean(mean_interval_error),
sd_error = sd(mean_interval_error, na.rm = T),
m_rms_error_ratios = mean(rms_error_ratios),
sd_rms_error_ratios = sd(rms_error_ratios, na.rm = T),
m_entropy_interval = mean(entropy_interval),
sd_entropy_interval = sd(entropy_interval, na.rm = T),
m_entropy_ratio_IOI = mean(entropy_IOI_ratios),
sd_entropy_ratio_IOI = sd(entropy_IOI_ratios, na.rm = T)
)
# error
data_error_aggregate_long <- data_features_aggregate %>%
filter(degree < 11) %>%
pivot_longer(cols = c(m_interval_error, m_rms_error_ratios),
names_to = "Metric",
values_to = "Error") %>%
mutate(SD = ifelse(Metric == "m_interval_error", sd_error, sd_rms_error_ratios),
ymin = Error - SD,
ymax = Error + SD) %>%
mutate(Metric = factor(Metric, levels = c("m_interval_error", "m_rms_error_ratios")))
# Plot with facet_wrap
plot_error <- ggplot(data_error_aggregate_long, aes(x = degree, y = Error)) +
geom_line(aes(color = Metric), size = 1) +
geom_ribbon(aes(ymin = ymin, ymax = ymax, fill = Metric), alpha = 0.2) +
facet_wrap(~Metric, scales = "free_y") +
labs(x = "Iteration", y = "Error") +
scale_x_continuous(breaks=c(0,1,2,3,4,5,6,7,8,9,10)) +
theme_classic() +
scale_color_manual(values = c("m_interval_error" = "blue", "m_rms_error_ratios" = "red")) +
scale_fill_manual(values = c("m_interval_error" = "blue", "m_rms_error_ratios" = "red")) +
theme(legend.position = "none")
plot_error
ggsave("results/figure1-structures/evolution_error.png", width = 11, height = 6,  units = "cm", bg = "white")
# entropy interval and error
data_entropy_aggregate_long <- data_features_aggregate %>%
filter(degree < 11) %>%
pivot_longer(cols = c(m_entropy_interval, m_entropy_ratio_IOI),
names_to = "Metric",
values_to = "Error") %>%
mutate(SD = ifelse(Metric == "m_entropy_interval", sd_entropy_interval, sd_entropy_ratio_IOI),
ymin = Error - SD,
ymax = Error + SD)
# Plot with facet_wrap
plot_entropy <- ggplot(data_entropy_aggregate_long, aes(x = degree, y = Error)) +
geom_line(aes(color = Metric), size = 1) +
geom_ribbon(aes(ymin = ymin, ymax = ymax, fill = Metric), alpha = 0.2) +
facet_wrap(~Metric, scales = "free_y") +
labs(x = "Iteration", y = "Entropy") +
theme_classic() +
scale_x_continuous(breaks=c(0,1,2,3,4,5,6,7,8,9,10)) +
scale_color_manual(values = c("m_entropy_interval" = "blue", "m_entropy_ratio_IOI" = "red")) +
scale_fill_manual(values = c("m_entropy_interval" = "blue", "m_entropy_ratio_IOI" = "red")) +
theme(legend.position = "none")
plot_entropy
ggsave("results/figure1-structures/evolution_entropy.png", width = 11, height = 6,  units = "cm", bg = "white")
