# calculate summary stats tonal features
tonality_data = data_v1_transposed %>%
group_by(degree) %>%
summarise(
n = n(),
mean_tonalness = mean(tonalness, na.rm = T),
sd_tonalness = sd(tonalness, na.rm = T),
se_tonalness = sd_tonalness/sqrt(n),
mean_tonal.clarity = mean(tonal.clarity, na.rm = T),
sd_tonal.clarity = sd(tonal.clarity, na.rm = T),
se_sd_tonal.clarity = sd_tonal.clarity/sqrt(n),
mean_tonal.spike = mean(tonal.spike, na.rm = T),
sd_tonal.spike = sd(tonal.spike, na.rm = T),
se_tonal.spike = sd_tonal.spike/sqrt(n)
)
# plot tonal features
plot_tonalness = tonality_data %>%
ggplot(aes(x= degree, y = mean_tonalness)) +
# plot line
geom_line()+
# plot standard deviation (SD) around the line
geom_ribbon(aes(ymin=mean_tonalness - se_tonalness,
ymax=mean_tonalness + se_tonalness),
alpha = 0.4)  +
# plot points
geom_point(size = 2, shape=21) +
scale_x_continuous(breaks=c(0,1,2,3,4,5,6,7,8,9,10)) +
# add labels
ylab("Tonalness") +
xlab("Iteration") +
ggtitle("Tonalness") +
theme_classic() +
theme(legend.position = "none")
plot_tona.clarity = tonality_data %>%
ggplot(aes(x= degree, y = mean_tonal.clarity)) +
geom_line()+
geom_ribbon(aes(ymin=mean_tonal.clarity - se_sd_tonal.clarity,
ymax=mean_tonal.clarity + se_sd_tonal.clarity),
alpha = 0.4)  +
geom_point(size = 2, shape=21) +
scale_x_continuous(breaks=c(0,1,2,3,4,5,6,7,8,9,10)) +
ylab("Tonal Clarity") +
xlab("Iteration") +
ggtitle("Tonal Clarity") +
theme_classic() +
theme(legend.position = "none")
plot_tona.spike = tonality_data %>%
ggplot(aes(x= degree, y = mean_tonal.spike)) +
geom_line()+
geom_ribbon(aes(ymin=mean_tonal.spike - se_tonal.spike,
ymax=mean_tonal.spike + se_tonal.spike),
alpha = 0.4)  +
geom_point(size = 2, shape=21) +
scale_x_continuous(breaks=c(0,1,2,3,4,5,6,7,8,9,10)) +
ylab("Tonal Spike") +
xlab("Iteration") +
ggtitle("Tonal Spike") +
theme_classic() +
theme(legend.position = "none")
tonal.results_Temp2001 = plot_grid(plot_tonalness, plot_tona.clarity, plot_tona.spike, nrow = 1)
tonal.results_Temp2001
tonal.results_KS
tonal_features_list <- apply_key_finding(data_v1_transposed, major_profile_KS, minor_profile_KS)
tonal_features = do.call(rbind, tonal_features_list)
data_v1_transposed$tonalness <- tonal_features$tonalness
data_v1_transposed$tonal.clarity <- tonal_features$tonal.clarity
data_v1_transposed$tonal.spike <- tonal_features$tonal.spike
data_v1_transposed$mode <- tonal_features$mode
data_v1_transposed$estimated_key <- tonal_features$estimated_key
# histogram of estimated key
hist_key <- data_v1_transposed %>%
select(id:degree, estimated_key) %>%
count(estimated_key) %>%
arrange(desc(n))
ggplot(hist_key, aes(x = reorder(estimated_key, -n), y = n)) +
geom_bar(stat = "identity") +
labs(x = "Estimated Key", y = "Number of Melodies", title = "Histogram of Melody Sequences") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# over time
hist_key <- data_v1_transposed %>%
select(id:degree, estimated_key) %>%
count(degree, estimated_key) %>%
arrange(desc(n))
ggplot(hist_key, aes(x = reorder(estimated_key, -n), y = n)) +
geom_bar(stat = "identity") +
labs(x = "Estimated Key", y = "Number of Melodies", title = "Histogram of Melody Sequences") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  +
facet_wrap(~degree)
# calculate summary stats tonal features
tonality_data = data_v1_transposed %>%
group_by(degree) %>%
summarise(
n = n(),
mean_tonalness = mean(tonalness, na.rm = T),
sd_tonalness = sd(tonalness, na.rm = T),
se_tonalness = sd_tonalness/sqrt(n),
mean_tonal.clarity = mean(tonal.clarity, na.rm = T),
sd_tonal.clarity = sd(tonal.clarity, na.rm = T),
se_sd_tonal.clarity = sd_tonal.clarity/sqrt(n),
mean_tonal.spike = mean(tonal.spike, na.rm = T),
sd_tonal.spike = sd(tonal.spike, na.rm = T),
se_tonal.spike = sd_tonal.spike/sqrt(n)
)
# plot tonal features
plot_tonalness = tonality_data %>%
ggplot(aes(x= degree, y = mean_tonalness)) +
# plot line
geom_line()+
# plot standard deviation (SD) around the line
geom_ribbon(aes(ymin=mean_tonalness - se_tonalness,
ymax=mean_tonalness + se_tonalness),
alpha = 0.4)  +
# plot points
geom_point(size = 2, shape=21) +
scale_x_continuous(breaks=c(0,1,2,3,4,5,6,7,8,9,10)) +
# add labels
ylab("Tonalness") +
xlab("Iteration") +
ggtitle("Tonalness") +
theme_classic() +
theme(legend.position = "none")
plot_tona.clarity = tonality_data %>%
ggplot(aes(x= degree, y = mean_tonal.clarity)) +
geom_line()+
geom_ribbon(aes(ymin=mean_tonal.clarity - se_sd_tonal.clarity,
ymax=mean_tonal.clarity + se_sd_tonal.clarity),
alpha = 0.4)  +
geom_point(size = 2, shape=21) +
scale_x_continuous(breaks=c(0,1,2,3,4,5,6,7,8,9,10)) +
ylab("Tonal Clarity") +
xlab("Iteration") +
ggtitle("Tonal Clarity") +
theme_classic() +
theme(legend.position = "none")
plot_tona.spike = tonality_data %>%
ggplot(aes(x= degree, y = mean_tonal.spike)) +
geom_line()+
geom_ribbon(aes(ymin=mean_tonal.spike - se_tonal.spike,
ymax=mean_tonal.spike + se_tonal.spike),
alpha = 0.4)  +
geom_point(size = 2, shape=21) +
scale_x_continuous(breaks=c(0,1,2,3,4,5,6,7,8,9,10)) +
ylab("Tonal Spike") +
xlab("Iteration") +
ggtitle("Tonal Spike") +
theme_classic() +
theme(legend.position = "none")
tonal.results_KS = plot_grid(plot_tonalness, plot_tona.clarity, plot_tona.spike, nrow = 1)
tonal.results_KS
tonal.results_KS
ggsave(tonal.results_KS, "evolution_tonal.results_KS.png", width = 20, height = 8, units = "cm")
ggsave("evolution_tonal.results_KS.png", tonal.results_KS, width = 20, height = 8, units = "cm")
ggplot(hist_key, aes(x = reorder(estimated_key, -n), y = n)) +
geom_bar(stat = "identity") +
labs(x = "Estimated Key", y = "Number of Melodies", title = "Histogram of Melody Sequences") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  +
facet_wrap(~degree)
data_v1_transposed
hist_key
data_v1_transposed
ggsave("hist_estimated_keys_KS.png", width = 20, height = 15, units = "cm")
ggplot(hist_key, aes(x = reorder(estimated_key, -n), y = n)) +
geom_bar(stat = "identity") +
labs(x = "Estimated Key", y = "Number of Melodies", title = "Histogram of Estimated Keys") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
data_v1_transposed
################################################################################
# test recency
################################################################################
data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estiamted_key)
################################################################################
# test recency
################################################################################
data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estimated_key)
# 3. Convert MIDI notes to letter sequences
midi_to_pitch_class <- function(midi_note) {
pitch_classes <- c("C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B")
pitch_classes[(midi_note %% 12) + 1]
}
################################################################################
# test recency
################################################################################
data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estimated_key)  %>%
mutate(across(starts_with("sung_pitch"), midi_to_pitch_class))
is 1 =1
1 =1
1 =1
1==1
"a"=="A"
"A"=="A"
################################################################################
# test recency
################################################################################
data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estimated_key)  %>%
mutate(across(starts_with("sung_pitch"), midi_to_pitch_class)) %>%
mutate(end_in_tonic = ifelse(sung_pitch5=estimated_key, 1, 0))
################################################################################
# test recency
################################################################################
data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estimated_key)  %>%
mutate(across(starts_with("sung_pitch"), midi_to_pitch_class)) %>%
mutate(end_in_tonic = ifelse(sung_pitch5==estimated_key, 1, 0))
################################################################################
# test recency
################################################################################
data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estimated_key)  %>%
mutate(across(starts_with("sung_pitch"), midi_to_pitch_class)) %>%
mutate(end_in_tonic = ifelse(sung_pitch5==estimated_key, 1, 0))
################################################################################
# test recency
################################################################################
data_recency = data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estimated_key)  %>%
mutate(across(starts_with("sung_pitch"), midi_to_pitch_class)) %>%
mutate(end_in_tonic = ifelse(sung_pitch5==estimated_key, 1, 0))
data_recency %>%
count(degree, end_in_tonic)
data_recency %>%
count(degree, end_in_tonic) %>%
filter(end_in_tonic == 0)
data_recency %>%
count(degree, end_in_tonic) %>%
filter(end_in_tonic == 1)
################################################################################
# test recency
################################################################################
data_recency = data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estimated_key)  %>%
mutate(across(starts_with("sung_pitch"), midi_to_pitch_class)) %>%
mutate(end_in_tonic = ifelse(sung_pitch1==estimated_key, 1, 0))
data_recency %>%
count(degree, end_in_tonic) %>%
filter(end_in_tonic == 1)
10/100
data_recency %>%
count(degree, end_in_tonic) %>%
filter(end_in_tonic == 1) %>%
mutate(percent = (n/100)*100)
################################################################################
# test recency
################################################################################
data_recency = data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estimated_key)  %>%
mutate(across(starts_with("sung_pitch"), midi_to_pitch_class)) %>%
mutate(end_in_tonic = ifelse(sung_pitch5==estimated_key, 1, 0))
data_recency %>%
count(degree, end_in_tonic) %>%
filter(end_in_tonic == 1) %>%
mutate(percent = (n/100)*100)
################################################################################
# test recency
################################################################################
data_recency = data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estimated_key)  %>%
mutate(across(starts_with("sung_pitch"), midi_to_pitch_class)) %>%
mutate(end_in_tonic = ifelse(sung_pitch4==estimated_key, 1, 0))
data_recency %>%
count(degree, end_in_tonic) %>%
filter(end_in_tonic == 1) %>%
mutate(percent = (n/100)*100)
################################################################################
# test recency
################################################################################
data_recency = data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estimated_key)  %>%
mutate(across(starts_with("sung_pitch"), midi_to_pitch_class)) %>%
mutate(end_in_tonic = ifelse(sung_pitch1==estimated_key, 1, 0))
data_recency %>%
count(degree, end_in_tonic) %>%
filter(end_in_tonic == 1) %>%
mutate(percent = (n/100)*100)
################################################################################
# test recency
################################################################################
data_recency = data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estimated_key)  %>%
mutate(across(starts_with("sung_pitch"), midi_to_pitch_class)) %>%
mutate(end_in_tonic = ifelse(sung_pitch2==estimated_key, 1, 0))
data_recency %>%
count(degree, end_in_tonic) %>%
filter(end_in_tonic == 1) %>%
mutate(percent = (n/100)*100)
################################################################################
# test recency
################################################################################
data_recency = data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estimated_key)  %>%
mutate(across(starts_with("sung_pitch"), midi_to_pitch_class)) %>%
mutate(end_in_tonic = ifelse(sung_pitch3==estimated_key, 1, 0))
data_recency %>%
count(degree, end_in_tonic) %>%
filter(end_in_tonic == 1) %>%
mutate(percent = (n/100)*100)
################################################################################
# test recency
################################################################################
data_recency = data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estimated_key)  %>%
mutate(across(starts_with("sung_pitch"), midi_to_pitch_class)) %>%
mutate(end_in_tonic = ifelse(sung_pitch5==estimated_key, 1, 0))
data_recency %>%
count(degree, end_in_tonic) %>%
filter(end_in_tonic == 1) %>%
mutate(percent = (n/100)*100)
data_v1_transposed
data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estimated_key)
data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estimated_key)  %>%
mutate(across(starts_with("sung_pitch"), midi_to_pitch_class))
data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estimated_key)  %>%
mutate(across(starts_with("sung_pitch"), midi_to_pitch_class)) %>%
mutate(estimated_key = toupper(estimated_key))
mutate(end_in_tonic = ifelse(sung_pitch5==estimated_key, 1, 0))
################################################################################
# test recency
################################################################################
data_recency = data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estimated_key)  %>%
mutate(across(starts_with("sung_pitch"), midi_to_pitch_class)) %>%
mutate(estimated_key = toupper(estimated_key)) %>%
mutate(end_in_tonic = ifelse(sung_pitch5==estimated_key, 1, 0))
data_recency %>%
count(degree, end_in_tonic) %>%
filter(end_in_tonic == 1) %>%
mutate(percent = (n/100)*100)
################################################################################
# test recency
################################################################################
data_recency = data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estimated_key)  %>%
mutate(across(starts_with("sung_pitch"), midi_to_pitch_class)) %>%
mutate(estimated_key = toupper(estimated_key)) %>%
mutate(end_in_tonic = ifelse(sung_pitch1==estimated_key, 1, 0))
data_recency %>%
count(degree, end_in_tonic) %>%
filter(end_in_tonic == 1) %>%
mutate(percent = (n/100)*100)
################################################################################
# test recency
################################################################################
data_recency = data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estimated_key)  %>%
mutate(across(starts_with("sung_pitch"), midi_to_pitch_class)) %>%
mutate(estimated_key = toupper(estimated_key)) %>%
mutate(end_in_tonic = ifelse(sung_pitch5==estimated_key, 1, 0))
data_recency %>%
count(degree, end_in_tonic) %>%
filter(end_in_tonic == 1) %>%
mutate(percent = (n/100)*100)
################################################################################
# test recency
################################################################################
data_recency = data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estimated_key)  %>%
mutate(across(starts_with("sung_pitch"), midi_to_pitch_class)) %>%
mutate(estimated_key = toupper(estimated_key)) %>%
mutate(end_in_tonic = ifelse(sung_pitch2==estimated_key, 1, 0))
data_recency %>%
count(degree, end_in_tonic) %>%
filter(end_in_tonic == 1) %>%
mutate(percent = (n/100)*100)
################################################################################
# test recency
################################################################################
data_recency = data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estimated_key)  %>%
mutate(across(starts_with("sung_pitch"), midi_to_pitch_class)) %>%
mutate(estimated_key = toupper(estimated_key)) %>%
mutate(end_in_tonic = ifelse(sung_pitch3==estimated_key, 1, 0))
data_recency %>%
count(degree, end_in_tonic) %>%
filter(end_in_tonic == 1) %>%
mutate(percent = (n/100)*100)
################################################################################
# test recency
################################################################################
data_recency = data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estimated_key)  %>%
mutate(across(starts_with("sung_pitch"), midi_to_pitch_class)) %>%
mutate(estimated_key = toupper(estimated_key)) %>%
mutate(end_in_tonic = ifelse(sung_pitch4==estimated_key, 1, 0))
data_recency %>%
count(degree, end_in_tonic) %>%
filter(end_in_tonic == 1) %>%
mutate(percent = (n/100)*100)
################################################################################
# test recency
################################################################################
data_recency = data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estimated_key)  %>%
mutate(across(starts_with("sung_pitch"), midi_to_pitch_class)) %>%
mutate(estimated_key = toupper(estimated_key)) %>%
mutate(end_in_tonic = ifelse(sung_pitch5==estimated_key, 1, 0))
data_recency %>%
count(degree, end_in_tonic) %>%
filter(end_in_tonic == 1) %>%
mutate(percent = (n/100)*100)
################################################################################
# test recency
################################################################################
data_recency = data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estimated_key)  %>%
mutate(across(starts_with("sung_pitch"), midi_to_pitch_class)) %>%
mutate(estimated_key = toupper(estimated_key)) %>%
mutate(end_in_tonic = ifelse(sung_pitch1==estimated_key, 1, 0))
data_recency %>%
count(degree, end_in_tonic) %>%
filter(end_in_tonic == 1) %>%
mutate(percent = (n/100)*100)
data_recency
data_v1_transposed
data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estimated_key)
note_to_midi_converter <- function(note) {
midi_value <- note_to_midi[note_upper]
return(midi_value)
}
data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estimated_key)  %>%
mutate(estimated_key_midi = note_to_midi_converter(estimated_key))
data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estimated_key)
note_to_midi_converter <- function(note) {
note_upper <- toupper(note) # Convert to uppercase
midi_value <- note_to_midi[note_upper] # Map to MIDI value
return(midi_value)
}
data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estimated_key)  %>%
mutate(estimated_key_midi = note_to_midi_converter(estimated_key)) %>%
)
data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estimated_key)  %>%
mutate(estimated_key_midi = note_to_midi_converter(estimated_key))
################################################################################
# test recency
################################################################################
note_to_midi <- c("C" = 60, "C#" = 61, "D" = 62, "D#" = 63, "E" = 64, "F" = 65,
"F#" = 66, "G" = 67, "G#" = 68, "A" = 69, "A#" = 70, "B" = 71)
note_to_midi_converter <- function(note) {
note_upper <- toupper(note) # Convert to uppercase
midi_value <- note_to_midi[note_upper] # Map to MIDI value
return(midi_value)
}
data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estimated_key)  %>%
mutate(estimated_key_midi = note_to_midi_converter(estimated_key))
data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estimated_key)  %>%
mutate(estimated_key_midi = note_to_midi_converter(estimated_key))
data_recency = data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estimated_key)  %>%
mutate(estimated_key_midi = note_to_midi_converter(estimated_key)) %>%
# mutate(across(starts_with("sung_pitch"), midi_to_pitch_class)) %>%
# mutate(end_in_tonic = ifelse(sung_pitch1==estimated_key, 1, 0))
mutate(diff_key_pitch1 = abs(sung_pitch1 - estimated_key_midi),
diff_key_pitch2 = abs(sung_pitch2 - estimated_key_midi),
diff_key_pitch3 = abs(sung_pitch3 - estimated_key_midi),
diff_key_pitch4 = abs(sung_pitch4 - estimated_key_midi),
diff_key_pitch5 = abs(sung_pitch5 - estimated_key_midi)))
data_recency = data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estimated_key)  %>%
mutate(estimated_key_midi = note_to_midi_converter(estimated_key)) %>%
# mutate(across(starts_with("sung_pitch"), midi_to_pitch_class)) %>%
# mutate(end_in_tonic = ifelse(sung_pitch1==estimated_key, 1, 0))
mutate(diff_key_pitch1 = abs(sung_pitch1 - estimated_key_midi),
diff_key_pitch2 = abs(sung_pitch2 - estimated_key_midi),
diff_key_pitch3 = abs(sung_pitch3 - estimated_key_midi),
diff_key_pitch4 = abs(sung_pitch4 - estimated_key_midi),
diff_key_pitch5 = abs(sung_pitch5 - estimated_key_midi))
data_recency
data_recency %>%
group_by(degree) %>%
summarise(
mean_diff_key_pitch1 = mean(diff_key_pitch1),
mean_diff_key_pitch2 = mean(diff_key_pitch2),
mean_diff_key_pitch3 = mean(diff_key_pitch3),
mean_diff_key_pitch4 = mean(diff_key_pitch4),
mean_diff_key_pitch5 = mean(diff_key_pitch5)
)
data_recency = data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estimated_key)  %>%
mutate(estimated_key_midi = note_to_midi_converter(estimated_key)) %>%
mutate(end_in_tonic = ifelse(sung_pitch1==estimated_key, 1, 0)) %>%
mutate(diff_key_pitch1 = abs(sung_pitch1 - estimated_key_midi),
iff_key_pitch2 = abs(sung_pitch2 - estimated_key_midi),
diff_key_pitch3 = abs(sung_pitch3 - estimated_key_midi),
diff_key_pitch4 = abs(sung_pitch4 - estimated_key_midi),
diff_key_pitch5 = abs(sung_pitch5 - estimated_key_midi))
data_recency
data_recency = data_v1_transposed %>%
select(id:degree, sung_pitch1:sung_pitch5, estimated_key)  %>%
mutate(estimated_key_midi = note_to_midi_converter(estimated_key)) %>%
mutate(end_in_tonic = ifelse(sung_pitch1==estimated_key_midi, 1, 0)) %>%
mutate(diff_key_pitch1 = abs(sung_pitch1 - estimated_key_midi),
iff_key_pitch2 = abs(sung_pitch2 - estimated_key_midi),
diff_key_pitch3 = abs(sung_pitch3 - estimated_key_midi),
diff_key_pitch4 = abs(sung_pitch4 - estimated_key_midi),
diff_key_pitch5 = abs(sung_pitch5 - estimated_key_midi))
data_recency
data_recency %>%
count(degree, end_in_tonic) %>%
filter(end_in_tonic == 1) %>%
mutate(percent = (n/100)*100)
